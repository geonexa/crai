{"version":3,"file":"static/js/277.3960f8e4.chunk.js","mappings":"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","sources":["components/SearchBar.js","helpers/mapFunction.js","components/Basemap.js","components/ShortFooter.js","pages/ClimateRiskDashboard.js"],"sourcesContent":["import React, { useEffect } from 'react'\nimport { useMap } from 'react-leaflet';\nimport { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\nimport 'leaflet-geosearch/dist/geosearch.css';\nimport iconMarker from 'leaflet/dist/images/marker-icon.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport L from 'leaflet';\n\n// Merge custom icon options with default options\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: iconRetina,\n  iconUrl: iconMarker,\n  shadowUrl: iconShadow,\n});\n\nconst SearchBar = () => {\n  const map = useMap();\n\n  useEffect(() => {\n    const provider = new OpenStreetMapProvider();\n    const searchControl = new GeoSearchControl({\n      provider,\n      style: 'bar',\n    });\n\n    map.addControl(searchControl);\n\n    return () => {\n      map.removeControl(searchControl);\n    };\n  }, [map]);\n\n  return (\n    null\n  )\n}\n\nexport default SearchBar","import * as L from \"leaflet\";\n\nexport const BaseMapsLayers = [\n    {\n        name: \"Street Map\",\n        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',\n        subdomains: ['a', 'b', 'c'],\n        attribution: 'Tiles &copy; Esri'\n    },\n    {\n        name: \"Google Map\",\n        url: 'https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',\n        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n        attribution: \"\"\n    },\n    // {\n    //   name: \"Open Street Map\",\n    //   url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    //   subdomains: ['a', 'b', 'c']\n    // },\n    {\n        name: \"Topographic Map\",\n        url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n        subdomains: ['a', 'b', 'c'],\n        attribution: \"\"\n    },\n    {\n        name: \"Satellite Map\",\n        url: 'https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n        attribution: \"\"\n    },\n\n    // {\n    //     name: \"Physical Map\",\n    //     url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer/tile/{z}/{y}/{x}',\n    //     subdomains: ['a', 'b', 'c'],\n    //     attribution: \"Tiles &copy; Esri &mdash; Source: US National Park Service\"\n    // },\n\n]\n\n\n\n\n\nexport const mapCenter = [23, 84]\n\nexport const setInitialMapZoom = ()=> {\n    var viewportWidth = window.innerWidth;\n    var mapZoom;\n    if (viewportWidth <= [767]) {\n        mapZoom = [4];\n    } if (viewportWidth >= [768]) {\n        mapZoom = [4.3];\n    } if (viewportWidth >= [1600]) {\n        mapZoom = [5];\n    }\n    return mapZoom;\n}\nexport const setDragging = () => {\n    var viewportWidth = window.innerWidth;\n    var dragging;\n    if (viewportWidth <= [767]) {\n        dragging = false;\n    } if (viewportWidth >= [768]) {\n        dragging = true;\n    }\n    return dragging;\n}\n\n\nexport const maxBounds = L.latLngBounds(\n    L.latLng(4, 60),  \n    L.latLng(45, 110)  \n);\n\n\n","import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents } from 'react-leaflet'\n// import L from 'leaflet';\nimport { FaHome } from \"react-icons/fa\";\nimport { BaseMapsLayers, mapCenter, setInitialMapZoom } from '../helpers/mapFunction';\n\n\n\n\n\n\nconst BaseMap = () => {\n\n\n    const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n\n    const map = useMap();\n\n\n\n\n\n\n    const HandleMouseHover = () => {\n        useMapEvents({\n            mousemove: (e) => {\n                setMousePosition(e.latlng);\n            },\n        });\n        return null;\n    };\n\n\n\n\n    const handleZoomToCenter = () => {\n        map.setView(mapCenter, setInitialMapZoom());\n\n    };\n\n\n\n\n    return (\n        <>\n\n\n            <HandleMouseHover />\n\n\n            <div\n                className='coordinates_container' >\n                Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n                {mousePosition.lng.toFixed(4)}\n            </div>\n            <button className='map_home_btn' onClick={handleZoomToCenter}><FaHome /></button>\n            <ScaleControl />\n\n\n\n\n        </>\n    )\n}\n\nexport default BaseMap","import React from 'react'\nimport WCLLogo from \"../assets/images/logo.png\"\nimport { FaExternalLinkAlt } from \"react-icons/fa\";\n\nconst ShortFooter = () => {\n\n  return (\n    <div>\n      <div className=\"footer_section\">\n        \n        <div className=\"copyright_container\">\n          <div className=\"copyright_text\">\n            <p>&copy; 2024 CEEW. All rights reserved.</p>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ShortFooter","import React, { useState } from 'react'\nimport SearchBar from \"../components/SearchBar\";\nimport { MapContainer, GeoJSON, TileLayer, ImageOverlay } from \"react-leaflet\";\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport { BaseMapsLayers, mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction'\nimport BaseMap from '../components/Basemap'\nimport IndiaBoundary from '../assets/data/shapefiles/IndiaBoundary.json';\nimport IndiaDistricts from '../assets/data/shapefiles/IndiaDistricts.json';\nimport IndiaStates from '../assets/data/shapefiles/IndiaStates.json';\nimport ShortFooter from '../components/ShortFooter';\n\n\n\n// const LayersOptions = [\n//     { name: 'Irrigated/Rainfed', value: 'Irrigated_Rainfed' },\n//     { name: 'Elevation', value: 'elevation' },\n// ];\n\nconst VectorDataOptions = [\n    { name: 'Country Boundry', value: 'Country_Boundry', data: IndiaBoundary },\n    { name: 'District Boundry', value: 'District_Boundry', data: IndiaDistricts },\n    { name: 'States Boundry', value: 'Basin_Boundry', data: IndiaStates },\n\n];\n\n\nconst ClimateRiskDashboard = () => {\n    const [selectedRasterLayer, setSelectedRasterLayer] = useState(\"Irrigated_Rainfed\");\n    const [rasterLayerOpacity, setRasterLayerOpacity] = useState(1);\n    const [selectedVectorData, setSelectedVectorData] = useState(VectorDataOptions[0]);\n    const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n\n    const handleBasemapSelection = (e) => {\n        const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n        setSelectedBasemapLayer(selectedItem);\n\n\n    };\n\n    const handleRasterLayerSelection = (e) => {\n        const value = e.target.value;\n        setSelectedRasterLayer((prevSelectedRaster) =>\n            prevSelectedRaster === value ? '' : value\n        );\n    };\n\n    const handleOpacityChange = (e) => {\n        setRasterLayerOpacity(parseFloat(e.target.value));\n    };\n\n\n    const handleVectorLayerSelection = (e) => {\n        const selectedItem = VectorDataOptions.find((item) => item.value === e.target.value);\n        setSelectedVectorData(selectedItem);\n    };\n\n\n    return (\n        <>\n        <div className='dasboard_page_container'>\n\n\n            <div className='main_dashboard'>\n                <div className='left_panel'>\n\n                    <div className=\"card_container\" style={{ height: \"100%\", overflowY: \"auto\" }}>\n\n                        <div className=\"accordion\" >\n                            <div className=\"accordion-item\">\n                                <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n                                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseThree\">\n                                        Base Map\n                                    </button>\n                                </h2>\n                                <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingThree\">\n                                    <div className=\"accordion-body\">\n                                        {BaseMapsLayers.map((option, index) => (\n                                            <div key={index} className=\"other_data_layers\">\n                                                <input\n                                                    type=\"radio\"\n                                                    id={option.name}\n\n                                                    value={option.name}\n                                                    checked={selectedBasemapLayer.name === option.name}\n                                                    onChange={handleBasemapSelection}\n                                                />\n                                                <label htmlFor={option.name}>{option.name}</label>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"accordion-item\">\n                                <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\n                                        Choose Layers\n                                    </button>\n                                </h2>\n                                <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\n                                <div className=\"accordion-body\">\n                                    </div>\n                                    {/* <div className=\"accordion-body\">\n                                        {LayersOptions.map(option => (\n                                            <div key={option.value} className=\"other_data_layers\">\n                                                <input\n                                                    type=\"radio\"\n                                                    id={option.value}\n                                                    value={option.value}\n                                                    checked={selectedRasterLayer === option.value}\n                                                    onChange={handleRasterLayerSelection}\n                                                />\n                                                <label htmlFor={option.value}>{option.name}</label>\n                                            </div>\n                                        ))}\n                                        <div className=\"input_range_container\">\n                                            <div className=\"input_range_label\">\n                                                <p>0</p>\n                                                <p>Layer Opacity</p>\n                                                <p>100</p>\n                                            </div>\n                                            <input\n                                                type=\"range\"\n                                                name=\"vol\"\n                                                min=\"0\"\n                                                max=\"1\"\n                                                step=\"0.1\"\n                                                value={rasterLayerOpacity}\n                                                onChange={handleOpacityChange}\n                                            />\n                                        </div>\n\n\n\n                                    </div> */}\n                                </div>\n                            </div>\n                            <div className=\"accordion-item\">\n                                <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                                    <button className=\"accordion-button collapsed \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"frue\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                                        Choose Boundaries\n                                    </button>\n                                </h2>\n                                <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                                    <div className=\"accordion-body\">\n                                        {VectorDataOptions.map(option => (\n                                            <div key={option.value} className=\"other_data_layers\">\n                                                <input\n                                                    type=\"checkbox\"\n                                                    id={option.value}\n                                                    name=\"data_type\"\n                                                    value={option.value}\n                                                    checked={selectedVectorData?.value === option.value}\n                                                    onChange={handleVectorLayerSelection}\n                                                />\n                                                <label htmlFor={option.value}>{option.name}</label>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n\n\n                    </div>\n\n\n                </div>\n\n                <div className='right_panel'>\n\n                    <MapContainer\n                        fullscreenControl={true}\n                        center={mapCenter}\n                        style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                        zoom={setInitialMapZoom()}\n                        maxBounds={maxBounds}\n                        // maxZoom={8}\n                        minZoom={setInitialMapZoom()}\n                        keyboard={false}\n                        dragging={setDragging()}\n                        // attributionControl={false}\n                        // scrollWheelZoom={false}\n                        doubleClickZoom={false}\n                    >\n\n                        <BaseMap />\n                        <SearchBar />\n                        <TileLayer\n                            key={selectedBasemapLayer.url}\n                            attribution={selectedBasemapLayer.attribution}\n                            url={selectedBasemapLayer.url}\n                            subdomains={selectedBasemapLayer.subdomains}\n                        />\n                         <GeoJSON\n                                key={selectedVectorData.value}\n                                style={{\n                                    fillColor: \"black\",\n                                    weight: 2,\n                                    color: \"black\",\n                                    fillOpacity: \"0.001\",\n                                    interactive: false,\n                                }}\n                                data={selectedVectorData.data.features}\n                            />\n\n\n\n\n                    </MapContainer>\n                </div>\n\n\n            </div>\n        </div>\n        <ShortFooter/>\n        </>\n    )\n}\n\nexport default ClimateRiskDashboard\n"],"names":["L","Default","mergeOptions","iconRetinaUrl","iconRetina","iconUrl","iconMarker","shadowUrl","iconShadow","SearchBar","map","useMap","useEffect","provider","OpenStreetMapProvider","searchControl","GeoSearchControl","style","addControl","removeControl","BaseMapsLayers","name","url","subdomains","attribution","mapCenter","setInitialMapZoom","mapZoom","viewportWidth","window","innerWidth","setDragging","dragging","maxBounds","BaseMap","mousePosition","setMousePosition","useState","lat","lng","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","_jsx","className","toFixed","onClick","handleZoomToCenter","setView","FaHome","ScaleControl","ShortFooter","VectorDataOptions","value","data","IndiaBoundary","IndiaDistricts","IndiaStates","ClimateRiskDashboard","selectedRasterLayer","setSelectedRasterLayer","rasterLayerOpacity","setRasterLayerOpacity","selectedVectorData","setSelectedVectorData","selectedBasemapLayer","setSelectedBasemapLayer","handleBasemapSelection","selectedItem","find","item","target","handleVectorLayerSelection","height","overflowY","id","type","option","index","checked","onChange","htmlFor","MapContainer","fullscreenControl","center","width","backgroundColor","border","margin","zoom","minZoom","keyboard","doubleClickZoom","TileLayer","GeoJSON","fillColor","weight","color","fillOpacity","interactive","features"],"sourceRoot":""}