{"version":3,"file":"static/js/99.98066d79.chunk.js","mappings":"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","sources":["components/SearchBar.js","components/Basemap.js","components/ExportMapButton.js","pages/ClimateRiskDashboard.js"],"sourcesContent":["import React, { useEffect } from 'react'\nimport { useMap } from 'react-leaflet';\nimport { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\nimport 'leaflet-geosearch/dist/geosearch.css';\nimport iconMarker from 'leaflet/dist/images/marker-icon.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport L from 'leaflet';\n\n// Merge custom icon options with default options\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: iconRetina,\n  iconUrl: iconMarker,\n  shadowUrl: iconShadow,\n});\n\nconst SearchBar = () => {\n  const map = useMap();\n\n  useEffect(() => {\n    const provider = new OpenStreetMapProvider();\n    const searchControl = new GeoSearchControl({\n      provider,\n      style: 'bar',\n    });\n\n    map.addControl(searchControl);\n\n    return () => {\n      map.removeControl(searchControl);\n    };\n  }, [map]);\n\n  return (\n    null\n  )\n}\n\nexport default SearchBar","import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents } from 'react-leaflet'\n// import L from 'leaflet';\nimport { FaHome } from \"react-icons/fa\";\nimport { BaseMapsLayers, mapCenter, setInitialMapZoom } from '../helpers/mapFunction';\n\n\n\n\n\n\nconst BaseMap = () => {\n\n\n    const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n\n    const map = useMap();\n\n\n\n\n\n\n    const HandleMouseHover = () => {\n        useMapEvents({\n            mousemove: (e) => {\n                setMousePosition(e.latlng);\n            },\n        });\n        return null;\n    };\n\n\n\n\n    const handleZoomToCenter = () => {\n        map.setView(mapCenter, setInitialMapZoom());\n\n    };\n\n\n\n\n    return (\n        <>\n\n\n            <HandleMouseHover />\n\n\n            <div\n                className='coordinates_container' >\n                Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n                {mousePosition.lng.toFixed(4)}\n            </div>\n            <button className='map_home_btn' onClick={handleZoomToCenter}><FaHome /></button>\n            <ScaleControl />\n\n\n\n\n        </>\n    )\n}\n\nexport default BaseMap","import React, { useState } from 'react'\nimport jsPDF from 'jspdf';\nimport domtoimage from 'dom-to-image';\nimport { AiFillPrinter } from 'react-icons/ai';\nimport { useAlertContext } from '../context/AlertContext';\nimport Logo from \"../assets/images/logo-printpdf.jpg\"\n// import MobileLegend from \"../assets/images/logo-printpdf.jpg\"\n\nconst ExportMapButton = ({ mapContainerRef, selectedYear, selectedSession }) => {\n\n    const { setAlertMessage, setShowAlert } = useAlertContext();\n\n    const handleExportMapPDF = () => {\n        const mapContainer = mapContainerRef.current;\n        const viewportWidth = window.innerWidth;\n\n\n        const logo = new Image();\n        logo.src = Logo;\n\n        setAlertMessage('Map is downloading..')\n        setShowAlert(true)\n\n\n        const options = {\n            width: mapContainer.offsetWidth * 2,\n            height: mapContainer.offsetHeight * 2,\n            style: {\n                transform: 'scale(2)',\n                transformOrigin: 'top left',\n                width: '100%',\n                height: 'auto',\n            },\n        };\n\n        domtoimage\n            .toBlob(mapContainer, options)\n            .then((blob) => {\n                const reader = new FileReader();\n                reader.onloadend = () => {\n                    const img = new Image();\n                    img.onload = () => {\n                        const aspectRatio = img.width / img.height;\n                        const pdfOrientation = viewportWidth <= 767 ? 'portrait' : 'landscape';\n                        const pdf = new jsPDF(pdfOrientation, 'px', 'a4');\n                        // 880, 500\n                        const logoWidth = 67.69; // Adjust the width of the logo as needed\n                        const logoHeight = 38.46\n                        // const logoX = (pdf.internal.pageSize.getWidth() - logoWidth) / 2;\n\n                        const logoX = 10;\n                        const logoY = 6; // Adjust the Y-coordinate for the logo placement\n                        pdf.addImage(logo, 'PNG', logoX, logoY, logoWidth, logoHeight);\n\n\n\n                        // Add title at the top\n                        // const title = mapTitle;\n                        // const titleFontSize = 16;\n                        // const titleTextWidth = pdf.getStringUnitWidth(title) * titleFontSize / pdf.internal.scaleFactor;\n                        // const titleTextX = (pdf.internal.pageSize.getWidth() - titleTextWidth) / 2;\n                        // const titleTextY = 20; // Y-coordinate for the title\n\n                        // pdf.setFontSize(titleFontSize);\n                        // pdf.text(titleTextX, titleTextY, title);\n\n\n                        if (viewportWidth <= 767) {\n                            // Mobile legend size Width 400, height 100\n\n\n\n                            const pdfHeight = pdf.internal.pageSize.getHeight() - 80; // Set the desired height for PDF if viewport width <= 767\n                            const pdfWidth = pdfHeight * aspectRatio;\n                            const x = (pdf.internal.pageSize.getWidth() - pdfWidth) / 2;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n\n\n                            // const LegendWidth = 133.33; // Adjust the width of the logo as needed\n                            // const LegendHeight = 33.33;\n                            // // const logoX = (pdf.internal.pageSize.getWidth() - logoWidth) / 2;\n                            // const LegendX = pdf.internal.pageSize.getWidth() - pdfWidth + LegendWidth;\n                            // const LegendY = pdf.internal.pageSize.getHeight() - LegendHeight - 80; \n                            // pdf.addImage(MobileLegend, 'PNG', LegendX, LegendY, LegendWidth, LegendHeight);\n\n\n                            const websiteName = `Drought Condition of ${selectedSession} for year ${selectedYear}`;\n                            const fontSize = 12;\n                            const textWidth = pdf.getStringUnitWidth(websiteName) * fontSize / pdf.internal.scaleFactor;\n                            const textX = (pdf.internal.pageSize.getWidth() - textWidth) / 2; // X-coordinate for center alignment\n                            const textY = pdf.internal.pageSize.getHeight() - 25;\n\n                            pdf.setFontSize(fontSize);\n                            pdf.text(textX, textY, websiteName);\n\n\n                        } else {\n                            const pdfWidth = pdf.internal.pageSize.getWidth(); // Use A4 width for PDF if viewport width > 767\n                            const pdfHeight = pdfWidth / aspectRatio;\n                            const x = 0;\n                            const y = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;\n                            pdf.addImage(img, 'PNG', x, y, pdfWidth, pdfHeight);\n                        }\n\n                        // Add text line at the bottom\n                        const websiteName = 'This map has been downloaded from Climate resilience atlas for India';\n                        const fontSize = 8;\n                        const textWidth = pdf.getStringUnitWidth(websiteName) * fontSize / pdf.internal.scaleFactor;\n                        const textX = (pdf.internal.pageSize.getWidth() - textWidth) / 2; // X-coordinate for center alignment\n                        const textY = pdf.internal.pageSize.getHeight() - 10; // Y-coordinate for the text\n\n                        pdf.setFontSize(fontSize);\n                        pdf.text(textX, textY, websiteName);\n\n                        const pdfOptions = {\n                            compress: true, // Enable compression\n                            quality: 0.4, // Adjust the quality (0.0 - 1.0, default is 0.9)\n                        };\n\n                        pdf.save('map.pdf', pdfOptions);\n\n                        setAlertMessage('Map has been exported as PDF successfully!')\n                        setShowAlert(true)\n\n                    };\n                    img.src = reader.result;\n                };\n                reader.readAsDataURL(blob);\n            })\n            .catch((error) => {\n                setAlertMessage('Error exporting map image:', error)\n                setShowAlert(true)\n\n            });\n    };\n\n    return (\n        <button onClick={handleExportMapPDF} className=\"map_print_btn\">\n            <AiFillPrinter />\n        </button>\n\n\n    )\n}\n\nexport default ExportMapButton","import React, { useRef, useState } from 'react'\nimport SearchBar from \"../components/SearchBar\";\nimport { MapContainer, GeoJSON, TileLayer, ImageOverlay } from \"react-leaflet\";\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport { BaseMapsLayers, mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction'\nimport BaseMap from '../components/Basemap'\nimport IndiaBoundary from '../assets/data/shapefiles/IndiaBoundary.json';\nimport IndiaDistricts from '../assets/data/shapefiles/IndiaDistricts.json';\nimport IndiaStates from '../assets/data/shapefiles/IndiaStates.json';\nimport IndiaSubdistricts from '../assets/data/shapefiles/IndiaSubdistricts.json';\nimport ShortFooter from '../components/ShortFooter';\nimport Taluka_MonsoonData from \"../assets/data/Taluka_MonsoonData.json\"\nimport Dis_MonssonData from \"../assets/data/Dis_MonssonData.json\"\nimport State_MonsoonData from \"../assets/data/State_MonsoonData.json\"\nimport MapLegend from '../components/MapLegend';\nimport IndiaClimateZones from \"../assets/data/IndiaClimateZones_1991_2020.png\"\nimport climate_zones_legend from \"../assets/images/climate_zones_legend.jpg\"\nimport ExportMapButton from '../components/ExportMapButton';\nimport monsoon_anomaly_legend from \"../assets/images/monsoon_anomaly_legend.jpg\"\nimport cyclone_pentad_occurrence from \"../assets/data/cyclone_pentad_occurrence.json\"\nimport drought_pentad_occurrence from \"../assets/data/drought_pentad_occurrence.json\"\nimport flood_pentad_occurrence from \"../assets/data/flood_pentad_occurrence.json\"\n\n\nconst MapDatasetOptions = [\n    {\n        DataName: \"Monsoon variability\",\n        DataValue: \"monsoon_data\",\n        variables: [\n\n            {\n                name: \"Changes in June rainfall\",\n                value: \"june_panomaly_mean\",\n            },\n            {\n                name: \"Changes in July rainfally\",\n                value: \"july_panomaly_mean\",\n            },\n            {\n                name: \"Changes in  August rainfall\",\n                value: \"august_panomaly_mean\",\n            },\n            {\n                name: \"Changes in September rainfall\",\n                value: \"september_panomaly_mean\",\n            },\n            {\n                name: \"Changes in total JJAS rainfall\",\n                value: \"jjas_percent_anomaly_mean\",\n            },\n            {\n                name: \"Changes in October rainfall\",\n                value: \"october_panomaly_mean\",\n            },\n            {\n                name: \"Changes in November rainfall\",\n                value: \"november_panomaly_mean\",\n            },\n            {\n                name: \"Changes in December rainfall\",\n                value: \"december_panomaly_mean\",\n            },\n            {\n                name: \"Changes in total OND rainfall\",\n                value: \"ond_panomaly_mean\",\n            },\n        ]\n    },\n    // {\n    //     DataName: \"Hydrometeorological disasters\",\n    //     DataValue: \"hydrometeorological_disasters\",\n    //     variables: [\n\n    //         {\n    //             name: \"Flood pentad\",\n    //             value: \"flood_pentad_occurrence\",\n    //         },\n    //         {\n    //             name: \"Drought pentad\",\n    //             value: \"drought_pentad_occurrence\",\n    //         },\n    //         {\n    //             name: \"Cyclone pentad\",\n    //             value: \"cyclone_pentad_occurrence\",\n    //         },\n\n    //     ]\n    // },\n]\n\nconst AdminBoundariesOptions = [\n    { name: 'Tehsils', value: 'Tehsil_Boundary', GeojsonData: IndiaSubdistricts },\n    { name: 'Districts', value: 'District_Boundry', GeojsonData: IndiaDistricts },\n    { name: 'States', value: 'State_Boundry', GeojsonData: IndiaStates },\n\n\n];\n\nconst RasterDataOptions = [\n    {\n        name: \"Köppen-Geiger climatological zones\",\n        value: \"climate_zones_map\",\n    },\n]\n\n\n\n\n\nconst ClimateRiskDashboard = () => {\n    const [selectedRasterLayer, setSelectedRasterLayer] = useState(\"\");\n    const [rasterLayerOpacity, setRasterLayerOpacity] = useState(1);\n    const [selectedAdminBoundaries, setSelectedAdminBoundaries] = useState(null);\n    const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n    const [selectedVariable, setSelectedVariable] = useState(null);\n\n    const [selectedMapData, setSelectedMapData] = useState(null);\n    const mapContainerRef = useRef(null);\n\n\n\n    const handleBasemapSelection = (e) => {\n        const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n        setSelectedBasemapLayer(selectedItem);\n\n\n    };\n\n\n\n    const handleSelectMapData = (e) => {\n        const selectedDataValue = e.target.value;\n        const selectedData = MapDatasetOptions.find(item => item.DataValue === selectedDataValue);\n        setSelectedRasterLayer(\"\")\n        setSelectedVariable(null)\n        setSelectedAdminBoundaries(null)\n        setSelectedMapData(selectedData);\n    };\n\n    const handleSelectVariable = (e) => {\n        const selectedOptionValue = e.target.value;\n        const selectedOption = selectedMapData && selectedMapData.variables.find(variable => variable.value === selectedOptionValue);\n        setSelectedVariable(selectedOption);\n    };\n\n\n\n\n    const handleRasterLayerSelection = (e) => {\n        const value = e.target.value;\n        setSelectedMapData(null)\n        setSelectedRasterLayer((prevSelectedRaster) =>\n            prevSelectedRaster === value ? '' : value\n        );\n    };\n\n    const handleOpacityChange = (e) => {\n        setRasterLayerOpacity(parseFloat(e.target.value));\n    };\n\n\n    const handleVectorLayerSelection = (e) => {\n        const selectedItem = AdminBoundariesOptions.find((item) => item.value === e.target.value);\n        setSelectedAdminBoundaries(selectedItem);\n    };\n\n\n\n\n    function TalukaOnEachfeature(feature, layer) {\n        layer.on('mouseover', function () {\n            const DataItem = Taluka_MonsoonData.find(item => item.TEHSIL === feature.properties.TEHSIL);\n\n            if (feature.properties && feature.properties.TEHSIL) {\n                let popupContent;\n                const value = DataItem[selectedVariable.value] ? DataItem[selectedVariable.value].toFixed(2) : \"NA\"\n\n                popupContent = `\n                <div>\n                STATE: ${DataItem.STATE}<br/>\n                DISTRICT: ${DataItem.DISTRICT}<br/>\n                TEHSIL: ${DataItem.TEHSIL}<br/>\n                VALUE: ${value}\n                </div>\n        `;\n\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n\n    function DistrictOnEachfeature(feature, layer) {\n        layer.on('mouseover', function () {\n            const DataItem = Dis_MonssonData.find(item => item.DISTRICT === feature.properties.DISTRICT);\n\n            if (feature.properties && feature.properties.DISTRICT) {\n                let popupContent;\n                const value = DataItem[selectedVariable.value] ? DataItem[selectedVariable.value].toFixed(2) : \"NA\"\n\n                popupContent = `\n                <div>\n                STATE: ${DataItem.STATE}<br/>\n                DISTRICT: ${DataItem.DISTRICT}<br/>\n               \n                VALUE: ${value}\n                </div>\n        `;\n\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n\n\n    function StateOnEachfeature(feature, layer) {\n        layer.on('mouseover', function () {\n            const DataItem = State_MonsoonData.find(item => item.STATE === feature.properties.STATE);\n\n            if (feature.properties && feature.properties.STATE) {\n                let popupContent;\n                const value = DataItem[selectedVariable.value] ? DataItem[selectedVariable.value].toFixed(2) : \"NA\"\n\n                popupContent = `\n                <div>\n                STATE: ${DataItem.STATE}<br/>\n                VALUE: ${value}\n                </div>\n        `;\n\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n\n\n\n\n    const GeojsonMonsoonDensity = (density => {\n        return density > 30 ? '#053062'\n            : density > 20 ? '#2F7AB6'\n                : density > 10 ? '#87BEDA'\n                    : density > 0 ? '#DDEBF2'\n                        : density > -10 ? '#FBE3D6'\n                            : density > -20 ? '#F09C7A'\n                                : density > -30 ? '#C13739'\n                                    : '#68001F';\n    })\n\n    const GeojsonFloodOccurrence = (density => {\n        return density > 7 ? '#053062'\n            : density > 6 ? '#2F7AB6'\n                : density > 5 ? '#87BEDA'\n                    : density > 4 ? '#DDEBF2'\n                        : density > 3 ? '#FBE3D6'\n                            : density > 2 ? '#F09C7A'\n                                : density > 1 ? '#C13739'\n                                    : '#68001F';\n    })\n\n\n    const GeojsonDroughtOccurrence = (density => {\n        return density > 7 ? '#053062'\n            : density > 6 ? '#2F7AB6'\n                : density > 5 ? '#87BEDA'\n                    : density > 4 ? '#DDEBF2'\n                        : density > 3 ? '#FBE3D6'\n                            : density > 2 ? '#F09C7A'\n                                : density > 1 ? '#C13739'\n                                    : '#68001F';\n    })\n\n\n\n    const GeojsonCycloneOccurrence = (density => {\n        return density > 7 ? '#053062'\n            : density > 6 ? '#2F7AB6'\n                : density > 5 ? '#87BEDA'\n                    : density > 4 ? '#DDEBF2'\n                        : density > 3 ? '#FBE3D6'\n                            : density > 2 ? '#F09C7A'\n                                : density > 1 ? '#C13739'\n                                    : '#68001F';\n    })\n\n\n\n\n    const TalukaStyle = (feature => {\n        const getDensityFromSummerData = (TEHSIL) => {\n            const DataItem = Taluka_MonsoonData.find(item => item.TEHSIL === TEHSIL);\n            return DataItem && selectedVariable ? DataItem[selectedVariable.value] : null;\n        };\n\n        const density = getDensityFromSummerData(feature.properties.TEHSIL);\n\n        return ({\n            fillColor: density ? GeojsonMonsoonDensity(density) : \"none\",\n            weight: 0.5,\n            opacity: 1,\n            color: 'black',\n            fillOpacity: 1\n        });\n    });\n\n\n    const DistrictStyle = (feature => {\n        const getDensityFromData = (DISTRICT) => {\n            const DataItem = Dis_MonssonData.find(item => item.DISTRICT === DISTRICT);\n            return DataItem && selectedVariable ? DataItem[selectedVariable.value] : null;\n        };\n\n        const density = getDensityFromData(feature.properties.DISTRICT);\n\n        return ({\n            fillColor: density ? GeojsonMonsoonDensity(density) : \"none\",\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            fillOpacity: 1\n        });\n    });\n\n\n    const DistrictHydrometeorologicalStyle = (feature => {\n        const getDensityFromData = (DISTRICT) => {\n            const DataItem = flood_pentad_occurrence.find(item => item.DISTRICT === DISTRICT);\n            console.log(DataItem)\n            return DataItem && selectedVariable ? DataItem[selectedVariable.value] : null;\n        };\n\n        const density = getDensityFromData(feature.properties.DISTRICT);\n        \n\n        return ({\n            // fillColor: density ? GeojsonMonsoonDensity(density) : \"none\",\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            fillOpacity: 1\n        });\n    });\n\n\n    const StateStyle = (feature => {\n        const getDensityFromSummerData = (STATE) => {\n            const DataItem = State_MonsoonData.find(item => item.STATE === STATE);\n            return DataItem && selectedVariable ? DataItem[selectedVariable.value] : null;\n        };\n\n        const density = getDensityFromSummerData(feature.properties.STATE);\n\n        return ({\n            fillColor: density ? GeojsonMonsoonDensity(density) : \"none\",\n            weight: 1,\n            opacity: 1,\n            color: 'black',\n            fillOpacity: 1\n        });\n    });\n\n\n\n    return (\n        <>\n            <div className='dasboard_page_container'>\n\n\n                <div className='main_dashboard'>\n                    <div className='left_panel'>\n\n                        <div className=\"card_container\" style={{ height: \"100%\", overflowY: \"auto\" }}>\n\n                            <div className=\"accordion\" >\n\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-heading3\">\n                                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapse3\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapse3\">\n                                            Select data\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapse3\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-heading3\">\n\n                                        <div className=\"accordion-body\">\n                                            <div className='map_layers'>\n                                                <select className=\"form-select mb-3\"\n                                                    value={selectedMapData ? selectedMapData.DataValue : ''}\n                                                    onChange={handleSelectMapData}\n                                                >\n                                                    <option value=\"\">Select</option>\n                                                    {MapDatasetOptions.map((item, index) => (\n                                                        <option key={index} value={item.DataValue}>{item.DataName}</option>\n                                                    ))}\n                                                </select>\n\n\n                                            </div>\n\n                                        </div>\n\n\n                                    </div>\n                                </div>\n\n\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-heading2\">\n                                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapse2\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapse2\">\n                                            Select variable\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapse2\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-heading2\">\n\n                                        <div className=\"accordion-body\">\n                                            <div className='map_layers'>\n\n                                                <select\n                                                    class=\"form-select mb-3\"\n                                                    value={selectedVariable ? selectedVariable.DataValue : ''}\n                                                    onChange={handleSelectVariable}\n\n                                                    disabled={!selectedMapData}\n                                                >\n                                                    <option value=\"\">Select</option>\n                                                    {selectedMapData && selectedMapData.variables.map((variable, index) => (\n                                                        <option key={index} value={variable.value}>\n                                                            {variable.name}\n                                                        </option>\n                                                    ))}\n                                                </select>\n\n\n                                            </div>\n\n                                        </div>\n\n\n\n                                    </div>\n                                </div>\n\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                                        <button className=\"accordion-button \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"frue\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                                            Select administrative units\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                                        <div className=\"accordion-body\">\n\n\n                                            <select\n                                                class=\"form-select mb-3\"\n                                                onChange={handleVectorLayerSelection}\n                                                disabled={!selectedVariable | !selectedMapData}\n                                                value={selectedAdminBoundaries ? selectedAdminBoundaries.value : ''}\n                                            >\n                                                <option value=\"\">Select</option>\n                                                {AdminBoundariesOptions.map((option, index) => (\n                                                    <option key={index} value={option.value}>\n                                                        {option.name}\n                                                    </option>\n                                                ))}\n                                            </select>\n\n                                        </div>\n                                    </div>\n                                </div>\n\n\n\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\n                                            Raster layers\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\n\n                                        <div className=\"accordion-body\">\n\n                                            {RasterDataOptions.map((option, index) => (\n                                                <div key={index} className=\"form-check\">\n                                                    <input\n                                                        className=\"form-check-input\"\n                                                        type=\"checkbox\"\n                                                        id={option.value}\n                                                        value={option.value}\n                                                        checked={selectedRasterLayer && selectedRasterLayer === option.value}\n                                                        onChange={handleRasterLayerSelection}\n                                                    />\n                                                    <label className=\"form-check-label\" htmlFor={option.value}>{option.name}</label>\n\n\n\n                                                </div>\n                                            ))}\n\n\n                                        </div>\n                                    </div>\n                                </div>\n\n\n\n\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n                                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseThree\">\n                                            Base map\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingThree\">\n                                        <div className=\"accordion-body\">\n                                            {BaseMapsLayers.map((option, index) => (\n                                                <div key={index} className=\"form-check\">\n                                                    <input\n                                                        type=\"radio\"\n                                                        id={option.name}\n                                                        className=\"form-check-input\"\n                                                        value={option.name}\n                                                        checked={selectedBasemapLayer.name === option.name}\n                                                        onChange={handleBasemapSelection}\n                                                    />\n                                                    <label className=\"form-check-label\" htmlFor={option.name}>{option.name}</label>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n\n\n\n                            </div>\n\n\n                        </div>\n\n\n                    </div>\n\n                    <div className='right_panel' ref={mapContainerRef}>\n\n                        <MapContainer\n                            fullscreenControl={true}\n                            center={mapCenter}\n                            style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                            zoom={setInitialMapZoom()}\n                            maxBounds={maxBounds}\n                            // maxZoom={8}\n                            minZoom={setInitialMapZoom()}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // attributionControl={false}\n                            // scrollWheelZoom={false}\n                            doubleClickZoom={false}\n                        >\n\n                            <BaseMap />\n                            <SearchBar />\n                            <ExportMapButton mapContainerRef={mapContainerRef} selectedYear=\"2020\" selectedSession=\"June\" />\n                            <TileLayer\n                                key={selectedBasemapLayer.url}\n                                attribution={selectedBasemapLayer.attribution}\n                                url={selectedBasemapLayer.url}\n                                subdomains={selectedBasemapLayer.subdomains}\n                            />\n\n\n\n\n\n\n\n\n                            {selectedRasterLayer === \"climate_zones_map\" && (\n                                <>\n                                    <div className=\"legend_image_container\" style={{ width: \"200px\" }}>\n                                        <img\n                                            src={climate_zones_legend}\n                                            alt=\"Legend_Img\"\n\n                                        />\n                                    </div>\n\n                                    <ImageOverlay\n                                        opacity={rasterLayerOpacity}\n                                        attribution=\"Data Source: <a href='https://www.gloh2o.org/koppen/' target='_blank'>Köppen-Geiger\n                            Global climate classification (1991-2020)</a>\"\n                                        key=\"Irrigated_Rainfed\"\n                                        url={IndiaClimateZones}\n                                        fitBounds={true}\n                                        // interactive={true}\n                                        bounds={[\n                                            [6.7583333329999995, 97.4],\n                                            [37.083333333, 68.125],\n                                        ]}\n\n                                    />\n\n                                    <GeoJSON\n                                        interactive={false}\n                                        style={{\n                                            fillColor: \"none\",\n                                            weight: 2,\n                                            color: \"black\",\n                                            fillOpacity: \"0\",\n                                            interactive: false,\n                                        }}\n                                        data={IndiaBoundary.features}\n                                    />\n\n                                </>\n\n                            )}\n\n\n\n                            {/* {selectedMapData && selectedMapData.DataValue === \"hydrometeorological_disasters\" && selectedVariable && selectedVariable.value && (\n                                <GeoJSON\n                                    key={selectedVariable.value}\n                                    style={DistrictHydrometeorologicalStyle}\n                                    data={IndiaDistricts.features}\n                                onEachFeature={DistrictOnEachfeature}\n                                />\n\n                            )} */}\n\n\n                            {selectedMapData && selectedMapData.DataValue === \"monsoon_data\" && selectedVariable && selectedAdminBoundaries && (\n                                <>\n                                    {/* <div className=\"legend_panel_container\">\n                                        <MapLegend legendName=\"Changes in last decade (2012-2022) compared to climate baseline (1982-2011) (in %)\" />\n                                    </div> */}\n\n                                    <div className=\"legend_panel_container\" style={{ width: \"320px\", bottom: \"30px\", padding: \"5px\", right: \"10px\", backgroundColor: \"white\", borderRadius: \"5px\" }}>\n                                        <div className=\"item-heading\" >\n                                            <p style={{ fontSize: \"14px\" }}>Changes in last decade (2012-2022) compared to climate baseline (1982-2011) (in %)</p>\n                                        </div>\n                                        <img style={{ width: \"100%\" }} src={monsoon_anomaly_legend} alt='Legend' />\n                                    </div>\n\n                                    {/* <GeoJSON\n                                        style={TalukaStyle}\n                                        onEachFeature={TalukaOnEachfeature}\n                                        data={IndiaSubdistricts}\n                                    /> */}\n\n\n                                    {selectedAdminBoundaries.value === \"Tehsil_Boundary\" ? (\n                                        <>\n\n                                            <GeoJSON\n                                                key={selectedAdminBoundaries.value + selectedVariable.value}\n                                                style={TalukaStyle}\n                                                data={IndiaSubdistricts.features}\n                                                onEachFeature={TalukaOnEachfeature}\n                                            />\n\n                                        </>\n\n\n                                    ) : selectedAdminBoundaries.value === \"District_Boundry\" ? (\n                                        <>\n\n                                            <GeoJSON\n                                                key={selectedAdminBoundaries.value + selectedVariable.value}\n                                                style={DistrictStyle}\n                                                data={IndiaDistricts.features}\n                                                onEachFeature={DistrictOnEachfeature}\n                                            />\n\n                                        </>\n\n\n                                    ) : selectedAdminBoundaries.value === \"State_Boundry\" ? (\n                                        <>\n\n                                            <GeoJSON\n                                                key={selectedAdminBoundaries.value + selectedVariable.value}\n                                                style={StateStyle}\n                                                onEachFeature={StateOnEachfeature}\n\n                                                // style={{\n                                                //     fillColor: \"black\",\n                                                //     weight: selectedAdminBoundaries.value === \"SubDistrict_Boundary\" ? 0.8 : 2,\n                                                //     color: \"black\",\n                                                //     fillOpacity: \"0.001\",\n                                                //     interactive: false,\n                                                // }}\n                                                data={IndiaStates.features}\n                                            />\n\n                                        </>\n\n\n                                    ) : null}\n\n\n                                </>\n                            )}\n\n\n\n\n\n\n\n                        </MapContainer>\n                    </div>\n\n\n                </div>\n            </div>\n            {/* <ShortFooter /> */}\n        </>\n    )\n}\n\nexport default ClimateRiskDashboard\n"],"names":["L","Default","mergeOptions","iconRetinaUrl","iconRetina","iconUrl","iconMarker","shadowUrl","iconShadow","SearchBar","map","useMap","useEffect","provider","OpenStreetMapProvider","searchControl","GeoSearchControl","style","addControl","removeControl","BaseMap","mousePosition","setMousePosition","useState","lat","lng","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","_jsx","className","toFixed","onClick","handleZoomToCenter","setView","mapCenter","setInitialMapZoom","FaHome","ScaleControl","_ref","mapContainerRef","selectedYear","selectedSession","setAlertMessage","setShowAlert","useAlertContext","handleExportMapPDF","mapContainer","current","viewportWidth","window","innerWidth","logo","Image","src","Logo","options","width","offsetWidth","height","offsetHeight","transform","transformOrigin","domtoimage","then","blob","reader","FileReader","onloadend","img","onload","aspectRatio","pdfOrientation","pdf","jsPDF","addImage","pdfHeight","internal","pageSize","getHeight","pdfWidth","x","getWidth","y","websiteName","concat","fontSize","textWidth","getStringUnitWidth","scaleFactor","textX","textY","setFontSize","text","save","compress","quality","result","readAsDataURL","catch","error","AiFillPrinter","MapDatasetOptions","DataName","DataValue","variables","name","value","AdminBoundariesOptions","GeojsonData","IndiaSubdistricts","IndiaDistricts","IndiaStates","RasterDataOptions","ClimateRiskDashboard","selectedRasterLayer","setSelectedRasterLayer","rasterLayerOpacity","setRasterLayerOpacity","selectedAdminBoundaries","setSelectedAdminBoundaries","selectedBasemapLayer","setSelectedBasemapLayer","BaseMapsLayers","selectedVariable","setSelectedVariable","selectedMapData","setSelectedMapData","useRef","handleBasemapSelection","selectedItem","find","item","target","handleRasterLayerSelection","prevSelectedRaster","GeojsonMonsoonDensity","density","overflowY","id","type","onChange","selectedDataValue","selectedData","index","class","selectedOptionValue","selectedOption","variable","disabled","option","checked","htmlFor","ref","MapContainer","fullscreenControl","center","backgroundColor","border","margin","zoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","ExportMapButton","TileLayer","attribution","url","subdomains","climate_zones_legend","alt","ImageOverlay","opacity","IndiaClimateZones","fitBounds","bounds","GeoJSON","interactive","fillColor","weight","color","fillOpacity","data","IndiaBoundary","bottom","padding","right","borderRadius","monsoon_anomaly_legend","feature","TEHSIL","DataItem","Taluka_MonsoonData","getDensityFromSummerData","properties","features","onEachFeature","layer","on","popupContent","STATE","DISTRICT","bindTooltip","sticky","openTooltip","closeTooltip","Dis_MonssonData","getDensityFromData","State_MonsoonData"],"sourceRoot":""}