{"version":3,"file":"static/js/812.4890cf04.chunk.js","mappings":"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","sources":["pages/DataDownloadPage.js"],"sourcesContent":["import React, { useState } from 'react'\nimport Footer from '../components/Footer'\nimport Taluka_MonsoonData from \"../assets/data/Taluka_MonsoonData.json\"\nimport { saveAs } from 'file-saver';\nimport { FaDownload } from \"react-icons/fa6\";\n\nconst MapDatasetOptions = [\n  {\n    DataName: \"Monsoon variability\",\n    DataValue: \"monsoon_data\",\n    variables: [\n\n      {\n        name: \"Changes in June rainfall\",\n        value: \"june_panomaly_mean\",\n      },\n      {\n        name: \"Changes in July rainfally\",\n        value: \"july_panomaly_mean\",\n      },\n      {\n        name: \"Changes in  August rainfall\",\n        value: \"august_panomaly_mean\",\n      },\n      {\n        name: \"Changes in September rainfall\",\n        value: \"september_panomaly_mean\",\n      },\n      {\n        name: \"Changes in total JJAS rainfall\",\n        value: \"jjas_percent_anomaly_mean\",\n      },\n      {\n        name: \"Changes in October rainfall\",\n        value: \"october_panomaly_mean\",\n      },\n      {\n        name: \"Changes in November rainfall\",\n        value: \"november_panomaly_mean\",\n      },\n      {\n        name: \"Changes in December rainfall\",\n        value: \"december_panomaly_mean\",\n      },\n      {\n        name: \"Changes in total OND rainfall\",\n        value: \"ond_panomaly_mean\",\n      },\n    ]\n  },\n]\n\nconst DataDownloadPage = () => {\n  const [selectedMapData, setSelectedMapData] = useState(null);\n  const [selectedVariable, setSelectedVariable] = useState(null);\n  const [districtList, setDistrictList] = useState([]);\n  const [talukaList, setTalukaList] = useState([]);\n  const [selectedState, setSelectedState] = useState(null);\n  const [selectedDistrict, setSelectedDistrict] = useState(null);\n  const [selectedTehsil, setSelectedTehsil] = useState(null);\n  const [filteredData, setFilteredData] = useState(null);\n\n\n\n\n\n\n  const handleStateSelect = (event, value) => {\n    let items = Taluka_MonsoonData.filter((item) => item.STATE === value);\n    items = [...new Set(items.map((item) => item))];\n    items.sort();\n\n    setDistrictList(items);\n    setSelectedState(value)\n    setFilteredData(items)\n\n\n \n\n  };\n\n  const handleDistrictSelect = (event, value) => {\n\n    let items = Taluka_MonsoonData.filter((item) => item.DISTRICT === value && item.STATE === selectedState);\n    items = [...new Set(items.map((item) => item))];\n    items.sort();\n\n    console.log(items)\n    setTalukaList(items);\n    setSelectedDistrict(value)\n    setFilteredData(items)\n\n  };\n\n  const handleTalukaSelect = (event, value) => {\n\n    let items = Taluka_MonsoonData.filter((item) => item.TEHSIL === value && item.DISTRICT === selectedDistrict);\n    items = [...new Set(items.map((item) => item))];\n    items.sort();\n    setSelectedTehsil(value)\n    setFilteredData(items)\n\n  };\n\n\n\n  const jsonToCSV = (json) => {\n    const csvRows = [];\n    const headers = Object.keys(json[0]);\n    csvRows.push(headers.join(','));\n\n    for (const row of json) {\n      const values = headers.map(header => {\n        const escaped = (''+row[header]).replace(/\"/g, '\\\\\"');\n        return `\"${escaped}\"`;\n      });\n      csvRows.push(values.join(','));\n    }\n    return csvRows.join('\\n');\n  };\n\n  // Function to handle the download\n  const handleDownload = () => {\n    const csvData = jsonToCSV(filteredData);\n    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n    saveAs(blob, 'data.csv');\n  };\n\n\n\n  return (\n    <>\n      <div className='page_container'>\n        <div className='page_heading'>\n          <h2>Download data</h2>\n        </div>\n\n\n        <div className='card_container'>\n          <div className='row'>\n            <div className='col-md-6'>\n              <label>Select Dataset</label>\n              <select className=\"form-select mb-3\" onChange={(e) => {\n                const selectedDataValue = e.target.value;\n                const selectedData = MapDatasetOptions.find(item => item.DataValue === selectedDataValue);\n                setSelectedMapData(selectedData);\n              }}>\n                <option defaultValue>Select Data</option>\n                {MapDatasetOptions.map((item, index) => (\n                  <option key={index} value={item.DataValue}>{item.DataName}</option>\n                ))}\n              </select>\n            </div>\n\n            {/* <div className='col-md-6'>\n\n              <label>Select Variable</label>\n              <select\n                className=\"form-select mb-3\"\n                onChange={(event) => {\n                  const selectedOptionValue = event.target.value;\n                  const selectedOption = selectedMapData.variables.find(variable => variable.value === selectedOptionValue);\n                  setSelectedVariable(selectedOption);\n                }}\n                disabled={!selectedMapData}\n              >\n                <option defaultValue>Select Variable</option>\n                {selectedMapData && selectedMapData.variables.map((variable, index) => (\n                  <option key={index} value={variable.value}>\n                    {variable.name}\n                  </option>\n                ))}\n              </select>\n            </div> */}\n\n            <div className='col-md-6'>\n              <label>Select State</label>\n              <select\n                className=\"form-select mb-3\"\n                onChange={(event) => handleStateSelect(event, event.target.value)}\n                disabled={!selectedMapData}\n              >\n                <option defaultValue>Select State</option>\n\n                {Taluka_MonsoonData &&\n                  [...new Set(Taluka_MonsoonData.map(item => item.STATE))].sort().map((state, index) => (\n                    <option key={index} value={state}>{state}</option>\n                  ))}\n              </select>\n            </div>\n\n            <div className='col-md-6'>\n              <label >Select District</label>\n              <select\n                className=\"form-select mb-3\"\n                onChange={(event) => handleDistrictSelect(event, event.target.value)}\n                disabled={districtList.length === 0}\n              >\n                <option defaultValue>Select District</option>\n\n                {districtList.length > 0 &&\n                  [...new Set(districtList.map(item => item.DISTRICT))].sort().map((district, index) => (\n                    <option key={index} value={district}>{district}</option>\n                  ))}\n              </select>\n            </div>\n\n\n\n            <div className='col-md-6'>\n              <label>Select Tehsil</label>\n              <select\n                className=\"form-select mb-3\"\n                onChange={(event) => handleTalukaSelect(event, event.target.value)}\n                disabled={talukaList.length === 0}\n              >\n                <option defaultValue>Select Tehsil</option>\n\n                {talukaList.length > 0 &&\n                  [...new Set(talukaList.map(item => item.TEHSIL))].sort().map((taluka, index) => (\n                    <option key={index} value={taluka}>{taluka}</option>\n                  ))}\n              </select>\n            </div>\n\n\n            <div className='col-md-6'>\n\n              <button\n                className=\"btn btn-primary mb-3 mt-4\"\n                style={{width:\"100%\"}}\n                onClick={handleDownload}\n                disabled={!filteredData || filteredData.length === 0}\n              >\n               Download <FaDownload/>\n              </button>\n            </div>\n\n\n\n\n          </div>\n\n\n\n\n\n\n        </div>\n\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default DataDownloadPage\n"],"names":["MapDatasetOptions","DataName","DataValue","variables","name","value","DataDownloadPage","selectedMapData","setSelectedMapData","useState","selectedVariable","setSelectedVariable","districtList","setDistrictList","talukaList","setTalukaList","selectedState","setSelectedState","selectedDistrict","setSelectedDistrict","selectedTehsil","setSelectedTehsil","filteredData","setFilteredData","_jsxs","_Fragment","children","className","_jsx","onChange","e","selectedDataValue","target","selectedData","find","item","defaultValue","map","index","event","handleStateSelect","items","Taluka_MonsoonData","filter","STATE","Set","sort","disabled","state","handleDistrictSelect","DISTRICT","console","log","length","district","handleTalukaSelect","TEHSIL","taluka","style","width","onClick","handleDownload","csvData","json","csvRows","headers","Object","keys","push","join","row","values","header","escaped","replace","concat","jsonToCSV","blob","Blob","type","saveAs","FaDownload","Footer"],"sourceRoot":""}