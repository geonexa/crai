{"version":3,"file":"static/js/793.398748ec.chunk.js","mappings":"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","sources":["components/SearchBar.js","components/Basemap.js","pages/ClimateRiskDashboard.js"],"sourcesContent":["import React, { useEffect } from 'react'\nimport { useMap } from 'react-leaflet';\nimport { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\nimport 'leaflet-geosearch/dist/geosearch.css';\nimport iconMarker from 'leaflet/dist/images/marker-icon.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport L from 'leaflet';\n\n// Merge custom icon options with default options\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: iconRetina,\n  iconUrl: iconMarker,\n  shadowUrl: iconShadow,\n});\n\nconst SearchBar = () => {\n  const map = useMap();\n\n  useEffect(() => {\n    const provider = new OpenStreetMapProvider();\n    const searchControl = new GeoSearchControl({\n      provider,\n      style: 'bar',\n    });\n\n    map.addControl(searchControl);\n\n    return () => {\n      map.removeControl(searchControl);\n    };\n  }, [map]);\n\n  return (\n    null\n  )\n}\n\nexport default SearchBar","import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents } from 'react-leaflet'\n// import L from 'leaflet';\nimport { FaHome } from \"react-icons/fa\";\nimport { BaseMapsLayers, mapCenter, setInitialMapZoom } from '../helpers/mapFunction';\n\n\n\n\n\n\nconst BaseMap = () => {\n\n\n    const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n\n    const map = useMap();\n\n\n\n\n\n\n    const HandleMouseHover = () => {\n        useMapEvents({\n            mousemove: (e) => {\n                setMousePosition(e.latlng);\n            },\n        });\n        return null;\n    };\n\n\n\n\n    const handleZoomToCenter = () => {\n        map.setView(mapCenter, setInitialMapZoom());\n\n    };\n\n\n\n\n    return (\n        <>\n\n\n            <HandleMouseHover />\n\n\n            <div\n                className='coordinates_container' >\n                Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n                {mousePosition.lng.toFixed(4)}\n            </div>\n            <button className='map_home_btn' onClick={handleZoomToCenter}><FaHome /></button>\n            <ScaleControl />\n\n\n\n\n        </>\n    )\n}\n\nexport default BaseMap","import React, { useState } from 'react'\nimport SearchBar from \"../components/SearchBar\";\nimport { MapContainer, GeoJSON, TileLayer, ImageOverlay } from \"react-leaflet\";\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport { BaseMapsLayers, mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction'\nimport BaseMap from '../components/Basemap'\nimport IndiaBoundary from '../assets/data/shapefiles/IndiaBoundary.json';\nimport IndiaDistricts from '../assets/data/shapefiles/IndiaDistricts.json';\nimport IndiaStates from '../assets/data/shapefiles/IndiaStates.json';\nimport IndiaSubdistricts from '../assets/data/shapefiles/IndiaSubdistricts.json';\nimport ShortFooter from '../components/ShortFooter';\nimport MonsoonData from \"../assets/data/MonsoonData.json\"\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport MapLegend from '../components/MapLegend';\nimport IndiaClimateZones from \"../assets/data/IndiaClimateZones_1991_2020.png\"\nimport climate_zones_legend from \"../assets/images/climate_zones_legend.jpg\"\n\n// const LayersOptions = [\n//     { name: 'Irrigated/Rainfed', value: 'Irrigated_Rainfed' },\n//     { name: 'Elevation', value: 'elevation' },\n// ];\n\nconst VectorDataOptions = [\n    { name: 'Country Boundry', value: 'Country_Boundry', data: IndiaBoundary },\n    { name: 'States Boundry', value: 'Basin_Boundry', data: IndiaStates },\n    { name: 'District Boundry', value: 'District_Boundry', data: IndiaDistricts },\n    { name: 'Sub-district Boundry', value: 'SubDistrict_Boundary', data: IndiaSubdistricts },\n\n];\n\nconst MonsoonDataOptions = [\n    {\n        name: \"Climate Zones (1991-2020)\",\n        value: \"climate_zones_map\",\n    },\n    {\n        name: \"June Percentage Anomaly\",\n        value: \"june_panomaly_mean\",\n    },\n    {\n        name: \"July Percentage Anomaly\",\n        value: \"july_panomaly_mean\",\n    },\n    {\n        name: \"August Percentage Anomaly\",\n        value: \"august_panomaly_mean\",\n    },\n    {\n        name: \"September Percentage Anomaly\",\n        value: \"september_panomaly_mean\",\n    },\n    {\n        name: \"JJAS Percentage Anomaly\",\n        value: \"jjas_percent_anomaly_mean\",\n    },\n    {\n        name: \"October Percentage Anomaly\",\n        value: \"october_panomaly_mean\",\n    },\n    {\n        name: \"November Percentage Anomaly\",\n        value: \"november_panomaly_mean\",\n    },\n    {\n        name: \"December Percentage Anomaly\",\n        value: \"december_panomaly_mean\",\n    },\n    {\n        name: \"OND Percentage Anomaly\",\n        value: \"ond_panomaly_mean\",\n    },\n\n]\n\n\n\n\nconst ClimateRiskDashboard = () => {\n    const [selectedRasterLayer, setSelectedRasterLayer] = useState(\"\");\n    const [rasterLayerOpacity, setRasterLayerOpacity] = useState(1);\n    const [selectedVectorData, setSelectedVectorData] = useState(VectorDataOptions[0]);\n    const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n\n    const [selectedMapData, setSelectedMapData] = useState(null);\n\n    console.log(selectedMapData)\n    const handleDataSelectionChange = (e) => {\n        const selectedItem = MonsoonDataOptions.find((item) => item.value === e.target.value);\n        setSelectedMapData(selectedItem);\n    };\n\n\n    const handleBasemapSelection = (e) => {\n        const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n        setSelectedBasemapLayer(selectedItem);\n\n\n    };\n\n    console.log(selectedVectorData)\n\n\n\n\n    const handleRasterLayerSelection = (e) => {\n        const value = e.target.value;\n        setSelectedRasterLayer((prevSelectedRaster) =>\n            prevSelectedRaster === value ? '' : value\n        );\n    };\n\n    const handleOpacityChange = (e) => {\n        setRasterLayerOpacity(parseFloat(e.target.value));\n    };\n\n\n    const handleVectorLayerSelection = (e) => {\n        const selectedItem = VectorDataOptions.find((item) => item.value === e.target.value);\n        setSelectedVectorData(selectedItem);\n        //     setSelectedVectorData((prevSelectedRaster) =>\n        //     prevSelectedRaster === selectedItem ? null : selectedItem\n        // );\n\n    };\n\n\n\n\n    function TalukaOnEachfeature(feature, layer) {\n        layer.on('mouseover', function () {\n            const DataItem = MonsoonData.find(item => item.ID === feature.properties.ID);\n\n            if (feature.properties && feature.properties.ID) {\n                let popupContent;\n                const value = DataItem[selectedMapData.value] ? DataItem[selectedMapData.value].toFixed(2) : \"NA\"\n\n                popupContent = `\n                <div>\n                ID: ${feature.properties.ID}<br/>\n                STATE: ${feature.properties.STATE}<br/>\n                DISTRICT: ${feature.properties.DISTRICT}<br/>\n                TEHSIL: ${feature.properties.TEHSIL}<br/>\n                VALUE: ${value}\n                </div>\n        `;\n\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n\n\n    const TalukaDensity = (density => {\n        return density > 30 ? '#053062'\n            : density > 20 ? '#2F7AB6'\n                : density > 10 ? '#87BEDA'\n                    : density > 0 ? '#DDEBF2'\n                        : density > -10 ? '#FBE3D6'\n                            : density > -20 ? '#F09C7A'\n                                : density > -30 ? '#C13739'\n                                    : '#68001F';\n    })\n\n\n\n\n    const TalukaStyle = (feature => {\n\n        const getDensityFromSummerData = (ID) => {\n            const DataItem = MonsoonData.find(item => item.ID === ID);\n            return DataItem ? DataItem[selectedMapData.value] : null;\n        };\n\n        const density = getDensityFromSummerData(feature.properties.ID);\n\n        return ({\n            fillColor: TalukaDensity(density),\n            weight: 0.5,\n            opacity: 1,\n            color: 'black',\n            // dashArray: '2',\n            fillOpacity: 1\n        });\n    });\n\n\n\n    return (\n        <>\n            <div className='dasboard_page_container'>\n\n\n                <div className='main_dashboard'>\n                    <div className='left_panel'>\n\n                        <div className=\"card_container\" style={{ height: \"100%\", overflowY: \"auto\" }}>\n\n                            <div className=\"accordion\" >\n\n\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\n                                            Choose Data Layers\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\n\n                                        <div className=\"accordion-body\">\n                                            <h6>Raster data</h6>\n                                            {MonsoonDataOptions.slice(0, 1).map((option, index) => (\n                                                <div key={index} className=\"form-check\">\n                                                    <input\n                                                        className=\"form-check-input\"\n                                                        type=\"radio\"\n                                                        id={option.name}\n                                                        value={option.value}\n                                                        checked={selectedMapData && selectedMapData.name === option.name}\n                                                        onChange={handleDataSelectionChange}\n                                                    />\n                                                    <label className=\"form-check-label\" htmlFor={option.name}>{option.name}</label>\n\n\n\n                                                </div>\n                                            ))}\n\n                                            <hr />\n                                            <h6>Southwest monsoon (JJAS)</h6>\n                                            {MonsoonDataOptions.slice(1, 6).map((option, index) => (\n                                                <>\n\n                                                    <div key={index} className=\"form-check\">\n                                                        <input\n                                                            className=\"form-check-input\"\n                                                            type=\"radio\"\n                                                            id={option.name}\n                                                            value={option.value}\n                                                            checked={selectedMapData && selectedMapData.name === option.name}\n                                                            onChange={handleDataSelectionChange}\n                                                        />\n                                                        <label className=\"form-check-label\" htmlFor={option.name}>{option.name}</label>\n\n\n                                                    </div>\n\n                                                </>\n\n\n\n\n                                            ))}\n\n                                            <hr />\n                                            <h6>Northeast monsoon (OND)</h6>\n                                            {MonsoonDataOptions.slice(6, 11).map((option, index) => (\n                                                <div key={index} className=\"form-check\">\n                                                    <input\n                                                        className=\"form-check-input\"\n                                                        type=\"radio\"\n                                                        id={option.name}\n                                                        value={option.value}\n                                                        checked={selectedMapData && selectedMapData.name === option.name}\n                                                        onChange={handleDataSelectionChange}\n                                                    />\n                                                    <label className=\"form-check-label\" htmlFor={option.name}>{option.name}</label>\n\n                                                </div>\n                                            ))}\n\n\n\n\n\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n                                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseThree\">\n                                            Base Map\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingThree\">\n                                        <div className=\"accordion-body\">\n                                            {BaseMapsLayers.map((option, index) => (\n                                                <div key={index} className=\"form-check\">\n                                                    <input\n                                                        type=\"radio\"\n                                                        id={option.name}\n                                                        className=\"form-check-input\"\n                                                        value={option.name}\n                                                        checked={selectedBasemapLayer.name === option.name}\n                                                        onChange={handleBasemapSelection}\n                                                    />\n                                                    <label className=\"form-check-label\" htmlFor={option.name}>{option.name}</label>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n\n\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                                        <button className=\"accordion-button \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"frue\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                                            Choose Boundaries\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                                        <div className=\"accordion-body\">\n                                            {VectorDataOptions.map(option => (\n                                                <div key={option.value} className=\"form-check\">\n                                                    <input\n                                                        className=\"form-check-input\"\n                                                        type=\"checkbox\"\n                                                        id={option.value}\n                                                        value={option.value}\n                                                        checked={selectedVectorData && selectedVectorData?.value === option.value}\n                                                        onChange={handleVectorLayerSelection}\n                                                    />\n                                                    <label className=\"form-check-label\" htmlFor={option.value}>{option.name}</label>\n\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n\n                            </div>\n\n\n                        </div>\n\n\n                    </div>\n\n                    <div className='right_panel'>\n\n                        <MapContainer\n                            fullscreenControl={true}\n                            center={mapCenter}\n                            style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                            zoom={setInitialMapZoom()}\n                            maxBounds={maxBounds}\n                            // maxZoom={8}\n                            minZoom={setInitialMapZoom()}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // attributionControl={false}\n                            // scrollWheelZoom={false}\n                            doubleClickZoom={false}\n                        >\n\n                            <BaseMap />\n                            <SearchBar />\n                            <TileLayer\n                                key={selectedBasemapLayer.url}\n                                attribution={selectedBasemapLayer.attribution}\n                                url={selectedBasemapLayer.url}\n                                subdomains={selectedBasemapLayer.subdomains}\n                            />\n\n\n                            {selectedMapData && selectedMapData.value === \"climate_zones_map\" && (\n                                <>\n                                    <div className=\"legend_image_container\" style={{ width: \"200px\" }}>\n                                        <img\n                                            src={climate_zones_legend}\n                                            alt=\"Legend_Img\"\n\n                                        />\n                                    </div>\n\n                                    <ImageOverlay\n                                        opacity={rasterLayerOpacity}\n                                        attribution=\"Data Source: <a href='https://www.gloh2o.org/koppen/' target='_blank'>Köppen-Geiger\n                                Global climate classification (1991-2020)</a>\"\n                                        key=\"Irrigated_Rainfed\"\n                                        url={IndiaClimateZones}\n                                        fitBounds={true}\n                                        // interactive={true}\n                                        bounds={[\n                                            [6.7583333329999995, 97.4],\n                                            [37.083333333, 68.125],\n                                        ]}\n\n                                    />\n                                </>\n\n                            )}\n\n\n\n                            {selectedMapData && selectedMapData.value !== \"climate_zones_map\" && (\n                                <>\n                                    <div className=\"legend_panel_container\">\n                                        <MapLegend legendName={selectedMapData.name} />\n                                    </div>\n                                    <GeoJSON\n                                        style={TalukaStyle}\n                                        onEachFeature={TalukaOnEachfeature}\n                                        data={IndiaSubdistricts}\n                                    />\n                                </>\n                            )}\n\n\n\n                            {selectedVectorData && (\n                                <GeoJSON\n                                    key={selectedVectorData.value}\n                                    style={{\n                                        fillColor: \"black\",\n                                        weight: selectedVectorData.value === \"SubDistrict_Boundary\" ? 0.8 : 2,\n                                        color: \"black\",\n                                        fillOpacity: \"0.001\",\n                                        interactive: false,\n                                    }}\n                                    data={selectedVectorData.data.features}\n                                />\n\n                            )}\n\n\n\n\n\n\n                        </MapContainer>\n                    </div>\n\n\n                </div>\n            </div>\n            {/* <ShortFooter /> */}\n        </>\n    )\n}\n\nexport default ClimateRiskDashboard\n"],"names":["L","Default","mergeOptions","iconRetinaUrl","iconRetina","iconUrl","iconMarker","shadowUrl","iconShadow","SearchBar","map","useMap","useEffect","provider","OpenStreetMapProvider","searchControl","GeoSearchControl","style","addControl","removeControl","BaseMap","mousePosition","setMousePosition","useState","lat","lng","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","_jsx","className","toFixed","onClick","handleZoomToCenter","setView","mapCenter","setInitialMapZoom","FaHome","ScaleControl","VectorDataOptions","name","value","data","IndiaBoundary","IndiaStates","IndiaDistricts","IndiaSubdistricts","MonsoonDataOptions","ClimateRiskDashboard","selectedRasterLayer","setSelectedRasterLayer","rasterLayerOpacity","setRasterLayerOpacity","selectedVectorData","setSelectedVectorData","selectedBasemapLayer","setSelectedBasemapLayer","BaseMapsLayers","selectedMapData","setSelectedMapData","console","log","handleDataSelectionChange","selectedItem","find","item","target","handleBasemapSelection","handleVectorLayerSelection","TalukaDensity","density","height","overflowY","id","type","slice","option","index","checked","onChange","htmlFor","MapContainer","fullscreenControl","center","width","backgroundColor","border","margin","zoom","maxBounds","minZoom","keyboard","dragging","setDragging","doubleClickZoom","TileLayer","attribution","url","subdomains","src","climate_zones_legend","alt","ImageOverlay","opacity","IndiaClimateZones","fitBounds","bounds","MapLegend","legendName","GeoJSON","feature","ID","DataItem","MonsoonData","getDensityFromSummerData","properties","fillColor","weight","color","fillOpacity","onEachFeature","layer","on","popupContent","concat","STATE","DISTRICT","TEHSIL","bindTooltip","sticky","openTooltip","closeTooltip","interactive","features"],"sourceRoot":""}