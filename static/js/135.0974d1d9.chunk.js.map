{"version":3,"file":"static/js/135.0974d1d9.chunk.js","mappings":"qSAMA,MA6CA,EA7C0BA,IAOnB,IAPoB,cACvBC,EAAa,iBACbC,EAAgB,eAChBC,EAAc,sBACdC,EAAqB,oBACrBC,EAAmB,kBACnBC,GACHN,EACG,MAAMO,GAAMC,EAAAA,EAAAA,MAmBZ,OAdAC,EAAAA,EAAAA,YAAU,KACN,GAAIL,GAAyBA,EAAsBM,SAASC,OAAS,EAAG,CACpE,MAAMC,EAASR,EAAsBM,SAASG,QAAO,CAACC,EAAKC,KACvD,MAAMC,EAAgBC,EAAAA,QAAUF,EAAQG,UAAUC,YAClD,OAAOL,EAAIM,OAAOJ,EAAc,GACjC,IAAIC,EAAAA,cAEPV,EAAIc,YAAYT,EACpB,MACIL,EAAIe,MAAMC,EAAAA,IAAWC,EAAAA,EAAAA,MACzB,GACD,CAACpB,EAAuBG,KAIvBkB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACKvB,GAAyBA,EAAsBM,WAEhDe,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CAEJC,KAAMzB,EAAsBM,SAE5BoB,MAAOxB,EACPyB,cAAe1B,GAJVJ,EAAcC,EAAiBC,IAQzC,E,wEChCX,MAyLA,EAzL2BH,IAA6I,IAA5I,cAAEC,EAAa,iBAAEC,EAAgB,gBAAE8B,EAAe,eAAE7B,EAAc,sBAAEC,EAAqB,iBAAE6B,EAAgB,aAAEC,EAAY,UAAEC,GAAWnC,EAGhK,MAAMoC,EAAYF,GAAsC,sBAAtBA,EAAaG,KA8D/C,MAAMC,EAAiBC,GACdA,EAAU,GAAK,UAClBA,EAAU,GAAK,UACbA,EAAU,GAAK,UACbA,EAAU,EAAI,UACZA,GAAW,GAAK,UACdA,GAAW,GAAK,UACdA,GAAW,GAAK,UACd,UAwBZf,EAAoBA,KACxB,IACIgB,EADAC,EAAgBC,OAAOC,WAS3B,OAPIF,GAAiB,CAAC,OACpBD,EAAU,CAAC,IACPC,GAAiB,CAAC,OACtBD,EAAU,CAAC,MACPC,GAAiB,CAAC,QACtBD,EAAU,CAAC,IAENA,CAAO,EAIhB,OACEf,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEiB,EAAAA,EAAAA,MAACC,EAAAA,EACC,CACAC,OAAQvB,EAAAA,GACRO,MAAO,CAAEiB,MAAO,OAAQC,OAAQ,OAAQC,gBAAiB,QAASC,OAAQ,OAAQC,OAAQ,QAC1FC,KAAM5B,IACN6B,UAAWA,EAAAA,GAEXC,QAAS9B,IACT+B,UAAU,EACVC,UAAUC,EAAAA,EAAAA,MACVC,oBAAoB,EAEpBC,iBAAiB,EAAMhC,SAAA,CAGtBvB,GAAyBH,GAAiBgC,GACzCW,EAAAA,EAAAA,MAAAlB,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,uBAAsBjC,UACnCiB,EAAAA,EAAAA,MAAA,KAAAjB,SAAA,CAAG,IAAEM,EAAiB4B,KAAK,UAG7BjB,EAAAA,EAAAA,MAAA,OAAKgB,UAAU,yBAAyB9B,MAAO,CAAEiB,MAAO,QAASe,OAAQ,MAAOC,MAAO,OAAQpC,SAAA,EAC7FF,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,eAAcjC,UAC3BF,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAAEkC,SAAU,QAASrC,SAAC,8BAElCF,EAAAA,EAAAA,KAAA,OAAKK,MAAO,CAAEiB,MAAO,QAAUkB,I,8yTAA6BC,IAAI,eAElEzC,EAAAA,EAAAA,KAAC0C,EAAiB,CAChB7D,kBA/DSS,IAEnB,MAKMwB,EAL4B6B,KAChC,MAAMC,EAAWC,EAAYC,MAAKC,GAAQA,EAAKJ,KAAOA,IACtD,OAAOC,EAAWA,EAASpC,EAAiBwC,OAAS,IAAI,EAG3CC,CAAyB3D,EAAQ4D,WAAWP,IAE5D,MAAQ,CACNQ,UAAWtC,EAAcC,GACzBsC,OAAQ,GACRC,QAAS,EACTC,MAAO,QAEPC,YAAa,EACd,EAgDS3E,oBA9GZ,SAA6BU,EAASkE,GACpCA,EAAMC,GAAG,aAAa,WACpB,MAAMb,EAAWC,EAAYC,MAAKC,GAAQA,EAAKJ,KAAOrD,EAAQ4D,WAAWP,KAEzE,GAAIrD,EAAQ4D,YAAc5D,EAAQ4D,WAAWP,GAAI,CAC/C,IAAIe,EACJ,MAAMV,EAAQJ,EAASpC,EAAiBwC,OAASJ,EAASpC,EAAiBwC,OAAOW,QAAQ,GAAK,KAE/FD,EAAY,wCAAAE,OAEFtE,EAAQ4D,WAAWP,GAAE,8BAAAiB,OAClBtE,EAAQ4D,WAAWW,MAAK,iCAAAD,OACrBtE,EAAQ4D,WAAWY,SAAQ,+BAAAF,OAC7BtE,EAAQ4D,WAAWa,OAAM,8BAAAH,OAC1BZ,EAAK,mFAOlBQ,EAAMQ,YAAYN,EAAc,CAAEO,QAAQ,GAC5C,CACAT,EAAMU,aACR,IAEAV,EAAMC,GAAG,YAAY,WACnBD,EAAMW,cACR,GACF,EAkFY3F,cAAeA,EACfC,iBAAkBA,EAClBC,eAAgBA,EAChBC,sBAAuBA,QAM3BwC,EAAAA,EAAAA,MAAAlB,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,uBAAuB9B,MAAO,CAAEiB,MAAO,QAASgB,MAAO,QAASpC,UAC7EiB,EAAAA,EAAAA,MAAA,KAAAjB,SAAA,CAAG,IAAEQ,EAAU,UAGjBV,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CAENE,MAAO,CACL8C,UAAW,QACXC,OAAQ,EACRE,MAAO,QACPC,YAAa,QACba,aAAa,GAEfhE,KAAMiE,EAAYpF,UARbT,EAAgBC,EAAmBC,MAc7CiC,GApJHX,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CACNC,KAAMK,EACNJ,MAAO,CAAE8C,UAAW,OAAQC,OAAQ,EAAGE,MAAO,SAAUC,YAAa,SApBlE9C,EAAa3B,KAAI,CAACiE,EAAMuB,KAC7BtE,EAAAA,EAAAA,KAACuE,EAAAA,EAAM,CAELC,SAAU,CAACC,WAAW1B,EAAK2B,UAAWD,WAAW1B,EAAK4B,YACtDC,KAAMpF,EAAAA,KAAO,CACXqF,QAASC,EACTC,cAAeD,EACfE,SAAU,CAAC,IACXC,YAAa,CAAC,GAAI,KACjB/E,UAEHF,EAAAA,EAAAA,KAACkF,EAAAA,EAAO,CAAAhF,SAAA,OAAA0D,OAASb,EAAKJ,OATjB2B,MA0KLtE,EAAAA,EAAAA,KAACmF,EAAAA,EAAY,QAGd,E,iCC3LP,MAAMC,EAAoB,CACtB,CACIC,SAAU,UACVC,UAAW,eACXC,UAAW,CACP,CACInD,KAAM,0BACNY,MAAO,sBAEX,CACIZ,KAAM,0BACNY,MAAO,sBAEX,CACIZ,KAAM,4BACNY,MAAO,wBAEX,CACIZ,KAAM,+BACNY,MAAO,2BAEX,CACIZ,KAAM,0BACNY,MAAO,6BAEX,CACIZ,KAAM,6BACNY,MAAO,yBAEX,CACIZ,KAAM,8BACNY,MAAO,0BAEX,CACIZ,KAAM,8BACNY,MAAO,0BAEX,CACIZ,KAAM,yBACNY,MAAO,wBAwXvB,EAlX4BwC,KAGxB,MAAOjF,EAAiBkF,IAAsBC,EAAAA,EAAAA,UAAS,OAChDC,EAAmBC,IAAwBF,EAAAA,EAAAA,UAAS,OACpDG,EAAmBC,IAAwBJ,EAAAA,EAAAA,UAAS,OACpDK,EAAmBC,IAAwBN,EAAAA,EAAAA,UAAS,OACpDO,EAAmBC,IAAwBR,EAAAA,EAAAA,UAAS,OAEpDS,EAAcC,IAAmBV,EAAAA,EAAAA,UAAS,KAC1CW,EAAYC,IAAiBZ,EAAAA,EAAAA,UAAS,KACtClH,EAAe+H,IAAoBb,EAAAA,EAAAA,UAAS,OAC5CjH,EAAkB+H,IAAuBd,EAAAA,EAAAA,UAAS,OAClDhH,EAAgB+H,IAAqBf,EAAAA,EAAAA,UAAS,OAC9C/G,EAAuB+H,IAA4BhB,EAAAA,EAAAA,UAAS,OAC5DjF,EAAckG,IAAmBjB,EAAAA,EAAAA,UAAS,KAE3C,gBAAEkB,EAAe,aAAEC,IAAiBC,EAAAA,EAAAA,KACpCC,GAAeC,EAAAA,EAAAA,QAAO,MA0H5B,OACIhH,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,0BAAyBjC,UAGpCiB,EAAAA,EAAAA,MAAA,OAAKgB,UAAU,iBAAgBjC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,aAAYjC,UAEvBF,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,iBAAiB9B,MAAO,CAAEkB,OAAQ,OAAQ0F,UAAW,QAAS/G,UAEzEiB,EAAAA,EAAAA,MAAA,OAAKgB,UAAU,YAAWjC,SAAA,EACtBiB,EAAAA,EAAAA,MAAA,OAAKgB,UAAU,iBAAgBjC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAImC,UAAU,mBAAmB+E,GAAG,4BAA2BhH,UAC3DF,EAAAA,EAAAA,KAAA,UAAQmC,UAAU,mBAAmBvB,KAAK,SAAS,iBAAe,WAAW,iBAAe,8BAA8B,gBAAc,OAAO,gBAAc,6BAA4BV,SAAC,mBAI9LF,EAAAA,EAAAA,KAAA,OAAKkH,GAAG,6BAA6B/E,UAAU,mCAAmC,kBAAgB,4BAA2BjC,UAEzHF,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,iBAAgBjC,UAC3BiB,EAAAA,EAAAA,MAAA,OAAKgB,UAAU,aAAYjC,SAAA,EACvBF,EAAAA,EAAAA,KAACmH,EAAAA,EAAY,CACT9G,MAAO,CAAE+G,aAAc,QACvBC,SAAUA,CAACC,EAAOtE,IAAUyC,EAAmBzC,GAAgB,MAC/DA,MAAOzC,EAEPgH,QAASnC,EACToC,eAAiBC,GAAWA,EAAOpC,SACnCqC,qBAAsBA,CAACD,EAAQzE,IAAUyE,EAAOnC,YAActC,EAAMsC,UACpEqC,cAAe,oBACfC,YAAcC,IAAW7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAS,IAAKD,EAAQE,MAAM,sBAG1D/H,EAAAA,EAAAA,KAACmH,EAAAA,EAAY,CACT9G,MAAO,CAAE+G,aAAc,QACvBC,SAAUA,CAACC,EAAOtE,IAAU4C,EAAqB5C,GACjDA,MAAO2C,EACP4B,QAAShH,EAAkBA,EAAgBgF,UAAY,GACvDiC,eAAiBC,GAAWA,EAAOrF,KACnCsF,qBAAsBA,CAACD,EAAQzE,IAAUyE,EAAOzE,QAAUA,EAAMA,MAChE2E,cAAe,yBACfK,UAAWzH,EACXqH,YAAcC,IAAW7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAS,IAAKD,EAAQE,MAAM,6BAE1D/H,EAAAA,EAAAA,KAACmH,EAAAA,EAAY,CACT9G,MAAO,CAAE+G,aAAc,QACvBC,SAAUA,CAACC,EAAOtE,IAAU8C,EAAqB9C,GACjDA,MAAO6C,EACP0B,QAAShH,EAAkBA,EAAgBgF,UAAY,GACvDiC,eAAiBC,GAAWA,EAAOrF,KACnCsF,qBAAsBA,CAACD,EAAQzE,IAAUyE,EAAOzE,QAAUA,EAAMA,MAChE2E,cAAe,yBACfK,UAAWzH,EACXqH,YAAcC,IAAW7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAS,IAAKD,EAAQE,MAAM,6BAE1D/H,EAAAA,EAAAA,KAACmH,EAAAA,EAAY,CACT9G,MAAO,CAAE+G,aAAc,QACvBC,SAAUA,CAACC,EAAOtE,IAAUgD,EAAqBhD,GACjDA,MAAO+C,EACPwB,QAAShH,EAAkBA,EAAgBgF,UAAY,GACvDiC,eAAiBC,GAAWA,EAAOrF,KACnCsF,qBAAsBA,CAACD,EAAQzE,IAAUyE,EAAOzE,QAAUA,EAAMA,MAChE2E,cAAe,yBACfK,UAAWzH,EACXqH,YAAcC,IAAW7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAS,IAAKD,EAAQE,MAAM,6BAE1D/H,EAAAA,EAAAA,KAACmH,EAAAA,EAAY,CACT9G,MAAO,CAAE+G,aAAc,QACvBC,SAAUA,CAACC,EAAOtE,IAAUkD,EAAqBlD,GACjDA,MAAOiD,EACPsB,QAAShH,EAAkBA,EAAgBgF,UAAY,GACvDiC,eAAiBC,GAAWA,EAAOrF,KACnCsF,qBAAsBA,CAACD,EAAQzE,IAAUyE,EAAOzE,QAAUA,EAAMA,MAChE2E,cAAe,yBACfK,UAAWzH,EACXqH,YAAcC,IAAW7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAS,IAAKD,EAAQE,MAAM,6BAG1D/H,EAAAA,EAAAA,KAACmH,EAAAA,EAAY,CACT9G,MAAO,CAAE+G,aAAc,QACvBC,SAAUA,CAACC,EAAOtE,IAhJxCiF,EAACX,EAAOtE,KAC9B,IAAIkF,EAAQrF,EAAYsF,QAAQpF,GAASA,EAAKc,QAAUb,IACxDkF,EAAQ,IAAI,IAAIE,IAAIF,EAAMpJ,KAAKiE,GAASA,MACxCmF,EAAMG,OAENjC,EAAgB8B,GAChB3B,EAAiBvD,GAEjB,IAAIsF,EAAmBC,EAAkBtJ,SAASkJ,QAAQ7I,GAAYA,EAAQ4D,WAAWW,QAAUb,IAEnG0D,EAAyB,CACrB9F,KAAM,oBACN3B,SAAUqJ,GACZ,EAmIsEL,CAAkBX,EAAOtE,GACrDkE,GAAG,QACHlE,MAAOxE,EACPgJ,eAAiBgB,GAAK,GAAA5E,OAAQ4E,GAC9BjB,QAAS,IAAI,IAAIa,IAAIvF,EAAY/D,KAAIiE,GAAQA,EAAKc,UAASwE,OAC3DX,qBAAsBA,CAACD,EAAQzE,IAAUyE,EAAOgB,OAASzF,EAAMyF,KAC/Dd,cAAe,oBACfK,UAAWrC,EACXiC,YAAcC,IAAW7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAS,IAAKD,EAAQE,MAAM,oBAG1D/H,EAAAA,EAAAA,KAACmH,EAAAA,EAAY,CACTnE,MAAOvE,EACP4B,MAAO,CAAE+G,aAAc,QACvBC,SAAUA,CAACC,EAAOtE,IA7IrC0F,EAACpB,EAAOtE,KAEjC,IAAIkF,EAAQrF,EAAYsF,QAAQpF,GAASA,EAAKe,WAAad,GAASD,EAAKc,QAAUrF,IACnF0J,EAAQ,IAAI,IAAIE,IAAIF,EAAMpJ,KAAKiE,GAASA,MACxCmF,EAAMG,OAEN/B,EAAc4B,GACd1B,EAAoBxD,GAEpB,IAAIsF,EAAmBC,EAAkBtJ,SAASkJ,QAAQ7I,GAAYA,EAAQ4D,WAAWY,WAAad,GAAS1D,EAAQ4D,WAAWW,QAAUrF,IAE5IkI,EAAyB,CACrB9F,KAAM,oBACN3B,SAAUqJ,GACZ,EA+HsEI,CAAqBpB,EAAOtE,GACxDkE,GAAG,WACHM,eAAiBmB,GAAQ,GAAA/E,OAAQ+E,GACjCpB,QAAS,IAAI,IAAIa,IAAIjC,EAAarH,KAAKiE,GAASA,EAAKe,aACrD4D,qBAAsBA,CAACD,EAAQzE,IAAUyE,EAAOgB,OAASzF,EAAMyF,KAC/Dd,cAAe,oBACfK,SAAkC,IAAxB7B,EAAajH,OACvB0I,YAAcC,IAAW7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAS,IAAKD,EAAQE,MAAM,uBAG1D/H,EAAAA,EAAAA,KAACmH,EAAAA,EAAY,CACTnE,MAAOtE,EACP2B,MAAO,CAAE+G,aAAc,QACvBC,SAAUA,CAACC,EAAOtE,IAxIvC4F,EAACtB,EAAOtE,KAE/B,IAAIkF,EAAQrF,EAAYsF,QAAQpF,GAASA,EAAKgB,SAAWf,GAASD,EAAKe,WAAarF,IACpFyJ,EAAQ,IAAI,IAAIE,IAAIF,EAAMpJ,KAAKiE,GAASA,MACxCmF,EAAMG,OACN5B,EAAkBzD,GAClB,IAAIsF,EAAmBC,EAAkBtJ,SAASkJ,QAAQ7I,GAAYA,EAAQ4D,WAAWa,SAAWf,GAAS1D,EAAQ4D,WAAWY,WAAarF,IAE7IiI,EAAyB,CACrB9F,KAAM,oBACN3B,SAAUqJ,GACZ,EA6HsEM,CAAmBtB,EAAOtE,GACtDkE,GAAG,SACHM,eAAiBqB,GAAM,GAAAjF,OAAQiF,GAC/BtB,QAAS,IAAI,IAAIa,IAAI/B,EAAWvH,KAAKiE,GAASA,EAAKgB,WACnD2D,qBAAsBA,CAACD,EAAQzE,IAAUyE,EAAOgB,OAASzF,EAAMyF,KAC/Dd,cAAe,oBACfK,SAAgC,IAAtB3B,EAAWnH,OACrB0I,YAAcC,IAAW7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAS,IAAKD,EAAQE,MAAM,+BAe1E5G,EAAAA,EAAAA,MAAA,OAAKgB,UAAU,iBAAgBjC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAImC,UAAU,mBAAmB+E,GAAG,4BAA2BhH,UAC3DF,EAAAA,EAAAA,KAAA,UAAQmC,UAAU,oBAAoBvB,KAAK,SAAS,iBAAe,WAAW,iBAAe,8BAA8B,gBAAc,OAAO,gBAAc,6BAA4BV,SAAC,mBAI/LF,EAAAA,EAAAA,KAAA,OAAKkH,GAAG,6BAA6B/E,UAAU,mCAAmC,kBAAgB,4BAA2BjC,UACzHF,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,iBAAgBjC,UAC3BiB,EAAAA,EAAAA,MAAA,OAAAjB,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAOmC,UAAU,aAAYjC,SAAC,kEAC9BF,EAAAA,EAAAA,KAAA,SACImC,UAAU,+BACVvB,KAAK,OAAOkI,OAAO,gBACnBzB,SArQtBC,IACtB,MAAMyB,EAAezB,EAAM0B,OAAOC,MAAM,GACxC,IAAKF,EAGD,OAFAlC,GAAa,QACbD,EAAgB,yBAIpB,MAAMsC,EAAWH,EAAa3G,KAAK+G,MAAM,KAAKC,MAE9C,GAAiB,QAAbF,EACAG,IAAAA,MAAWN,EAAc,CACrBO,QAAQ,EACRC,SAAU,SAAUC,GAChB,MAAMC,EAAkBC,OAAOC,KAAKH,EAAQpJ,KAAK,IAG3CwJ,EAFkB,CAAC,WAAY,YAAa,MAEXzB,QAAOmB,IAAWG,EAAgBI,SAASP,KAElF,GAAIM,EAAe1K,OAAS,EAGxB,OAFA2H,GAAa,QACbD,EAAgB,+DAADhD,OAAgEgG,EAAeE,KAAK,QAGvGnD,EAAgB6C,EAAQpJ,KAC5B,EACA2J,MAAO,SAAUA,GACblD,GAAa,GACbD,EAAgB,2BAA6BmD,EAAMC,QACvD,SAED,GAAiB,YAAbd,EAAwB,CAC/B,MAAMe,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAUC,GACtB,IACI,MAAMC,EAAWC,KAAKC,MAAMH,EAAEpB,OAAOwB,QACrC7D,EAAgB0D,EACpB,CAAE,MAAON,GACLlD,GAAa,GACbD,EAAgB,+BAAiCmD,EAAMC,QAC3D,CACJ,EACAC,EAAOQ,QAAU,WACb5D,GAAa,GACbD,EAAgB,yBACpB,EACAqD,EAAOS,WAAW3B,EACtB,MACIlC,GAAa,GACbD,EAAgB,8DACpB,EAoN4C+D,MAAM,2CACNC,IAAK7D,KAGT/G,EAAAA,EAAAA,KAAA,UACImC,UAAU,yBACV0I,QAlKlBC,KAC1BnE,EAAgB,IACZI,EAAagE,UACbhE,EAAagE,QAAQ/H,MAAQ,KACjC,EA+J4CgF,UAAWvH,GAAwC,IAAxBA,EAAavB,OAAagB,SACxD,6BAkB7BiB,EAAAA,EAAAA,MAAA,OAAKgB,UAAU,0BAAyBjC,SAAA,EAEpCF,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,gBAAejC,UAC1BF,EAAAA,EAAAA,KAACgL,EAAkB,CACfxM,cAAeA,EACfC,iBAAkBA,EAClBC,eAAgBA,EAChBC,sBAAuBA,EACvB6B,iBAAkBmF,EAClBlF,aAAcA,EACdC,UAAU,aAIlBV,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,gBAAejC,UAC1BF,EAAAA,EAAAA,KAACgL,EAAkB,CACfxM,cAAeA,EACfC,iBAAkBA,EAClBC,eAAgBA,EAChBC,sBAAuBA,EACvB6B,iBAAkBqF,EAClBpF,aAAcA,EACdC,UAAU,aAIlBV,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,gBAAejC,UAC1BF,EAAAA,EAAAA,KAACgL,EAAkB,CACfxM,cAAeA,EACfC,iBAAkBA,EAClBC,eAAgBA,EAChBC,sBAAuBA,EACvB6B,iBAAkBuF,EAClBtF,aAAcA,EACdC,UAAU,aAIlBV,EAAAA,EAAAA,KAAA,OAAKmC,UAAU,gBAAejC,UAC1BF,EAAAA,EAAAA,KAACgL,EAAkB,CACfxM,cAAeA,EACfC,iBAAkBA,EAClBC,eAAgBA,EAChB6B,gBAAiBA,EACjB5B,sBAAuBA,EACvB6B,iBAAkByF,EAClBxF,aAAcA,EACdC,UAAU,qBAU/B,C","sources":["components/FiltererdJsonData.js","components/DecesionSupportMap.js","pages/DecisionSupportPage.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { GeoJSON, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport { mapCenter, setInitialMapZoom } from '../helpers/mapFunction';\n\n\nconst FiltererdJsonData = ({\n    selectedState,\n    selectedDistrict,\n    selectedTehsil,\n    filteredIndiaDistrict,\n    TalukaOnEachfeature,\n    filteredDataStyle\n}) => {\n    const map = useMap();\n\n\n\n\n    useEffect(() => {\n        if (filteredIndiaDistrict && filteredIndiaDistrict.features.length > 0) {\n            const bounds = filteredIndiaDistrict.features.reduce((acc, feature) => {\n                const featureBounds = L.geoJSON(feature.geometry).getBounds();\n                return acc.extend(featureBounds);\n            }, new L.LatLngBounds());\n\n            map.flyToBounds(bounds);\n        } else {\n            map.flyTo(mapCenter, setInitialMapZoom());\n        }\n    }, [filteredIndiaDistrict, map]);\n\n\n    return (\n        <>\n            {filteredIndiaDistrict && filteredIndiaDistrict.features && (\n\n            <GeoJSON\n                key={selectedState+selectedDistrict+selectedTehsil}\n                data={filteredIndiaDistrict.features}\n                // style={{ fillColor: 'none', weight: 2, color: 'yellow' }}\n                style={filteredDataStyle}\n                onEachFeature={TalukaOnEachfeature}\n            />\n            \n            )}\n        </>\n\n    );\n};\n\nexport default FiltererdJsonData;\n","import React, { useEffect } from 'react'\nimport { MapContainer, GeoJSON, TileLayer, ImageOverlay, ScaleControl, useMap, Circle, Marker, Popup, Tooltip } from \"react-leaflet\";\nimport * as L from \"leaflet\";\nimport { BaseMapsLayers, mapCenter, maxBounds, setDragging } from '../helpers/mapFunction'\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport MapLegend from './MapLegend';\nimport FiltererdJsonData from './FiltererdJsonData';\nimport MonsoonData from \"../assets/data/MonsoonData.json\"\nimport monsoon_anomaly_legend from \"../assets/images/monsoon_anomaly_legend.jpg\"\nimport marker_icon from \"../assets/images/marker_icon.png\"\nimport IndiaStates from '../assets/data/shapefiles/IndiaStates.json';\n\nconst DecesionSupportMap = ({ selectedState, selectedDistrict, selectedMapData, selectedTehsil, filteredIndiaDistrict, selectedVariable, uploadeddata, mapNumber }) => {\n\n\n  const isGeoJSON = uploadeddata && uploadeddata.type === \"FeatureCollection\";\n\n  const renderMarkers = () => {\n    return uploadeddata.map((item, index) => (\n      <Marker\n        key={index}\n        position={[parseFloat(item.Latitude), parseFloat(item.Longitude)]}\n        icon={L.icon({\n          iconUrl: marker_icon,\n          iconRetinaUrl: marker_icon,\n          iconSize: [15],\n          popupAnchor: [0, -5],\n        })}\n      >\n        <Tooltip>{`ID: ${item.ID}`}</Tooltip>\n      </Marker>\n    ));\n  };\n\n  const renderGeoJSON = () => {\n    return (\n      <GeoJSON\n        data={uploadeddata}\n        style={{ fillColor: 'none', weight: 3, color: 'yellow', fillOpacity: \"0.4\" }}\n      />\n    );\n  };\n\n\n  function TalukaOnEachfeature(feature, layer) {\n    layer.on('mouseover', function () {\n      const DataItem = MonsoonData.find(item => item.ID === feature.properties.ID);\n\n      if (feature.properties && feature.properties.ID) {\n        let popupContent;\n        const value = DataItem[selectedVariable.value] ? DataItem[selectedVariable.value].toFixed(2) : \"NA\"\n\n        popupContent = `\n            <div>\n            ID: ${feature.properties.ID}<br/>\n            STATE: ${feature.properties.STATE}<br/>\n            DISTRICT: ${feature.properties.DISTRICT}<br/>\n            TEHSIL: ${feature.properties.TEHSIL}<br/>\n            VALUE: ${value}\n                \n               \n                \n            </div>\n    `;\n\n        layer.bindTooltip(popupContent, { sticky: true });\n      }\n      layer.openTooltip();\n    });\n\n    layer.on('mouseout', function () {\n      layer.closeTooltip();\n    });\n  }\n\n\n\n  const TalukaDensity = (density => {\n    return density > 30 ? '#053062'\n      : density > 20 ? '#2F7AB6'\n        : density > 10 ? '#87BEDA'\n          : density > 0 ? '#DDEBF2'\n            : density > -10 ? '#FBE3D6'\n              : density > -20 ? '#F09C7A'\n                : density > -30 ? '#C13739'\n                  : '#68001F';\n  })\n\n\n\n  const TalukaStyle = (feature => {\n\n    const getDensityFromSummerData = (ID) => {\n      const DataItem = MonsoonData.find(item => item.ID === ID);\n      return DataItem ? DataItem[selectedVariable.value] : null;\n    };\n\n    const density = getDensityFromSummerData(feature.properties.ID);\n\n    return ({\n      fillColor: TalukaDensity(density),\n      weight: 0.5,\n      opacity: 1,\n      color: 'black',\n      // dashArray: '2',\n      fillOpacity: 1\n    });\n  });\n\n  const setInitialMapZoom = () => {\n    var viewportWidth = window.innerWidth;\n    var mapZoom;\n    if (viewportWidth <= [767]) {\n      mapZoom = [3];\n    } if (viewportWidth >= [768]) {\n      mapZoom = [3.3];\n    } if (viewportWidth >= [1600]) {\n      mapZoom = [4];\n    }\n    return mapZoom;\n  }\n\n\n  return (\n    <>\n      <MapContainer\n        // fullscreenControl={true}\n        center={mapCenter}\n        style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n        zoom={setInitialMapZoom()}\n        maxBounds={maxBounds}\n        // maxZoom={8}\n        minZoom={setInitialMapZoom()}\n        keyboard={false}\n        dragging={setDragging()}\n        attributionControl={false}\n        // scrollWheelZoom={false}\n        doubleClickZoom={false}\n      >\n\n        {filteredIndiaDistrict && selectedState && selectedVariable ? (\n          <>\n            <div className='decision_map_heading'>\n              <p> {selectedVariable.name} </p>\n            </div>\n\n            <div className=\"legend_panel_container\" style={{ width: \"250px\", bottom: \"5px\", right: \"5px\" }}>\n              <div className=\"item-heading\" >\n                <p style={{ fontSize: \"14px\" }}>Percentage Anomaly (%)</p>\n              </div>\n              <img style={{ width: \"100%\" }} src={monsoon_anomaly_legend} alt='Legend' />\n            </div>\n            <FiltererdJsonData\n              filteredDataStyle={TalukaStyle}\n              TalukaOnEachfeature={TalukaOnEachfeature}\n              selectedState={selectedState}\n              selectedDistrict={selectedDistrict}\n              selectedTehsil={selectedTehsil}\n              filteredIndiaDistrict={filteredIndiaDistrict}\n            />\n\n\n          </>\n        ) : (\n          <>\n            <div className='decision_map_heading' style={{ width: \"100px\", right: \"10px\" }}>\n              <p> {mapNumber} </p>\n            </div>\n\n            <GeoJSON\n              key={selectedState + selectedDistrict + selectedTehsil}\n              style={{\n                fillColor: \"black\",\n                weight: 1,\n                color: \"black\",\n                fillOpacity: \"0.001\",\n                interactive: false,\n              }}\n              data={IndiaStates.features}\n            />\n          </>\n\n        )}\n\n        {isGeoJSON ? renderGeoJSON() : renderMarkers()}\n\n\n\n\n\n        <ScaleControl />\n\n      </MapContainer>\n    </>\n  )\n}\n\nexport default DecesionSupportMap","import React, { useRef, useState } from 'react'\nimport IndiaSubdistricts from '../assets/data/shapefiles/IndiaSubdistricts.json';\nimport MonsoonData from \"../assets/data/MonsoonData.json\"\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport DecesionSupportMap from '../components/DecesionSupportMap';\nimport { useAlertContext } from '../context/AlertContext';\nimport Papa from 'papaparse';\n\nconst MapDatasetOptions = [\n    {\n        DataName: \"Monsoon\",\n        DataValue: \"monsoon_data\",\n        variables: [\n            {\n                name: \"June Percentage Anomaly\",\n                value: \"june_panomaly_mean\",\n            },\n            {\n                name: \"July Percentage Anomaly\",\n                value: \"july_panomaly_mean\",\n            },\n            {\n                name: \"August Percentage Anomaly\",\n                value: \"august_panomaly_mean\",\n            },\n            {\n                name: \"September Percentage Anomaly\",\n                value: \"september_panomaly_mean\",\n            },\n            {\n                name: \"JJAS Percentage Anomaly\",\n                value: \"jjas_percent_anomaly_mean\",\n            },\n            {\n                name: \"October Percentage Anomaly\",\n                value: \"october_panomaly_mean\",\n            },\n            {\n                name: \"November Percentage Anomaly\",\n                value: \"november_panomaly_mean\",\n            },\n            {\n                name: \"December Percentage Anomaly\",\n                value: \"december_panomaly_mean\",\n            },\n            {\n                name: \"OND Percentage Anomaly\",\n                value: \"ond_panomaly_mean\",\n            },\n        ]\n    },\n]\n\nconst DecisionSupportPage = () => {\n\n\n    const [selectedMapData, setSelectedMapData] = useState(null);\n    const [selectedVariable1, setSelectedVariable1] = useState(null);\n    const [selectedVariable2, setSelectedVariable2] = useState(null);\n    const [selectedVariable3, setSelectedVariable3] = useState(null);\n    const [selectedVariable4, setSelectedVariable4] = useState(null);\n\n    const [districtList, setDistrictList] = useState([]);\n    const [talukaList, setTalukaList] = useState([]);\n    const [selectedState, setSelectedState] = useState(null);\n    const [selectedDistrict, setSelectedDistrict] = useState(null);\n    const [selectedTehsil, setSelectedTehsil] = useState(null);\n    const [filteredIndiaDistrict, setFilteredIndiaDistrict] = useState(null);\n    const [uploadeddata, setUploadeddata] = useState([]);\n\n    const { setAlertMessage, setShowAlert } = useAlertContext();\n    const fileInputRef = useRef(null);\n\n\n    const handleFileChange = (event) => {\n        const selectedFile = event.target.files[0];\n        if (!selectedFile) {\n            setShowAlert(true);\n            setAlertMessage(\"Please select a file.\");\n            return;\n        }\n\n        const fileType = selectedFile.name.split('.').pop();\n\n        if (fileType === \"csv\") {\n            Papa.parse(selectedFile, {\n                header: true,\n                complete: function (results) {\n                    const uploadedHeaders = Object.keys(results.data[0]);\n                    const requiredHeaders = [\"Latitude\", \"Longitude\", \"ID\"];\n\n                    const missingHeaders = requiredHeaders.filter(header => !uploadedHeaders.includes(header));\n\n                    if (missingHeaders.length > 0) {\n                        setShowAlert(true);\n                        setAlertMessage(`The following headers are missing in the selected CSV file: ${missingHeaders.join(\", \")}`);\n                        return;\n                    }\n                    setUploadeddata(results.data);\n                },\n                error: function (error) {\n                    setShowAlert(true);\n                    setAlertMessage(\"Error parsing CSV file: \" + error.message);\n                }\n            });\n        } else if (fileType === \"geojson\") {\n            const reader = new FileReader();\n            reader.onload = function (e) {\n                try {\n                    const jsonData = JSON.parse(e.target.result);\n                    setUploadeddata(jsonData);\n                } catch (error) {\n                    setShowAlert(true);\n                    setAlertMessage(\"Error reading GeoJSON file: \" + error.message);\n                }\n            };\n            reader.onerror = function () {\n                setShowAlert(true);\n                setAlertMessage(\"Error loading the file\");\n            };\n            reader.readAsText(selectedFile);\n        } else {\n            setShowAlert(true);\n            setAlertMessage(\"Unsupported file type. Please upload a CSV or GeoJSON file.\");\n        }\n    };\n\n\n\n    const handleStateSelect = (event, value) => {\n        let items = MonsoonData.filter((item) => item.STATE === value);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n\n        setDistrictList(items);\n        setSelectedState(value)\n\n        let filteredFeatures = IndiaSubdistricts.features.filter((feature) => feature.properties.STATE === value);\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredFeatures,\n        });\n\n    };\n\n    const handleDistrictSelect = (event, value) => {\n\n        let items = MonsoonData.filter((item) => item.DISTRICT === value && item.STATE === selectedState);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n\n        setTalukaList(items);\n        setSelectedDistrict(value)\n\n        let filteredFeatures = IndiaSubdistricts.features.filter((feature) => feature.properties.DISTRICT === value && feature.properties.STATE === selectedState);\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredFeatures,\n        });\n\n    };\n\n    const handleTalukaSelect = (event, value) => {\n\n        let items = MonsoonData.filter((item) => item.TEHSIL === value && item.DISTRICT === selectedDistrict);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n        setSelectedTehsil(value)\n        let filteredFeatures = IndiaSubdistricts.features.filter((feature) => feature.properties.TEHSIL === value && feature.properties.DISTRICT === selectedDistrict);\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredFeatures,\n        });\n\n\n    };\n\n    const handleCancelSelection = () => {\n        setUploadeddata([]); // Reset the uploaded data state\n        if (fileInputRef.current) {\n            fileInputRef.current.value = null;  // Correctly reset the input\n        }\n\n    };\n    \n\n\n\n\n\n    return (\n        <>\n            <div className='dasboard_page_container'>\n\n\n                <div className='main_dashboard'>\n                    <div className='left_panel'>\n\n                        <div className=\"card_container\" style={{ height: \"100%\", overflowY: \"auto\" }}>\n\n                            <div className=\"accordion\" >\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\n                                            Choose Data\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\n\n                                        <div className=\"accordion-body\">\n                                            <div className='map_layers'>\n                                                <Autocomplete\n                                                    style={{ marginBottom: \"10px\" }}\n                                                    onChange={(event, value) => setSelectedMapData(value ? value : null)}\n                                                    value={selectedMapData}\n                                                    // value={MapDatasetOptions.find(option => option.DataValue === selectedMapData && selectedMapData.value)}\n                                                    options={MapDatasetOptions}\n                                                    getOptionLabel={(option) => option.DataName}\n                                                    isOptionEqualToValue={(option, value) => option.DataValue === value.DataValue}\n                                                    noOptionsText={\"No Available Data\"}\n                                                    renderInput={(params) => <TextField {...params} label=\"Select Dataset\" />}\n                                                />\n\n                                                <Autocomplete\n                                                    style={{ marginBottom: \"10px\" }}\n                                                    onChange={(event, value) => setSelectedVariable1(value)}\n                                                    value={selectedVariable1}\n                                                    options={selectedMapData ? selectedMapData.variables : []}\n                                                    getOptionLabel={(option) => option.name}\n                                                    isOptionEqualToValue={(option, value) => option.value === value.value}\n                                                    noOptionsText={\"No Available Variables\"}\n                                                    disabled={!selectedMapData}\n                                                    renderInput={(params) => <TextField {...params} label=\"Select Map-1 Variable\" />}\n                                                />\n                                                <Autocomplete\n                                                    style={{ marginBottom: \"10px\" }}\n                                                    onChange={(event, value) => setSelectedVariable2(value)}\n                                                    value={selectedVariable2}\n                                                    options={selectedMapData ? selectedMapData.variables : []}\n                                                    getOptionLabel={(option) => option.name}\n                                                    isOptionEqualToValue={(option, value) => option.value === value.value}\n                                                    noOptionsText={\"No Available Variables\"}\n                                                    disabled={!selectedMapData}\n                                                    renderInput={(params) => <TextField {...params} label=\"Select Map-2 Variable\" />}\n                                                />\n                                                <Autocomplete\n                                                    style={{ marginBottom: \"10px\" }}\n                                                    onChange={(event, value) => setSelectedVariable3(value)}\n                                                    value={selectedVariable3}\n                                                    options={selectedMapData ? selectedMapData.variables : []}\n                                                    getOptionLabel={(option) => option.name}\n                                                    isOptionEqualToValue={(option, value) => option.value === value.value}\n                                                    noOptionsText={\"No Available Variables\"}\n                                                    disabled={!selectedMapData}\n                                                    renderInput={(params) => <TextField {...params} label=\"Select Map-3 Variable\" />}\n                                                />\n                                                <Autocomplete\n                                                    style={{ marginBottom: \"10px\" }}\n                                                    onChange={(event, value) => setSelectedVariable4(value)}\n                                                    value={selectedVariable4}\n                                                    options={selectedMapData ? selectedMapData.variables : []}\n                                                    getOptionLabel={(option) => option.name}\n                                                    isOptionEqualToValue={(option, value) => option.value === value.value}\n                                                    noOptionsText={\"No Available Variables\"}\n                                                    disabled={!selectedMapData}\n                                                    renderInput={(params) => <TextField {...params} label=\"Select Map-4 Variable\" />}\n                                                />\n\n                                                <Autocomplete\n                                                    style={{ marginBottom: \"10px\" }}\n                                                    onChange={(event, value) => handleStateSelect(event, value)}\n                                                    id=\"state\"\n                                                    value={selectedState}\n                                                    getOptionLabel={(state) => `${state}`}\n                                                    options={[...new Set(MonsoonData.map(item => item.STATE))].sort()}\n                                                    isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                                    noOptionsText={\"No Available Data\"}\n                                                    disabled={!selectedVariable1}\n                                                    renderInput={(params) => <TextField {...params} label=\"Select State\" />}\n                                                />\n\n                                                <Autocomplete\n                                                    value={selectedDistrict}\n                                                    style={{ marginBottom: \"10px\" }}\n                                                    onChange={(event, value) => handleDistrictSelect(event, value)}\n                                                    id=\"district\"\n                                                    getOptionLabel={(district) => `${district}`}\n                                                    options={[...new Set(districtList.map((item) => item.DISTRICT))]}\n                                                    isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                                    noOptionsText={\"No Available Data\"}\n                                                    disabled={districtList.length === 0}\n                                                    renderInput={(params) => <TextField {...params} label=\"Select District\" />}\n                                                />\n\n                                                <Autocomplete\n                                                    value={selectedTehsil}\n                                                    style={{ marginBottom: \"10px\" }}\n                                                    onChange={(event, value) => handleTalukaSelect(event, value)}\n                                                    id=\"taluka\"\n                                                    getOptionLabel={(taluka) => `${taluka}`}\n                                                    options={[...new Set(talukaList.map((item) => item.TEHSIL))]}\n                                                    isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                                    noOptionsText={\"No Available Data\"}\n                                                    disabled={talukaList.length === 0}\n                                                    renderInput={(params) => <TextField {...params} label=\"Select Tehsil\" />}\n                                                />\n\n\n\n\n                                            </div>\n\n                                        </div>\n\n\n\n                                    </div>\n                                </div>\n\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                                        <button className=\"accordion-button \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"frue\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                                            Upload Data\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                                        <div className=\"accordion-body\">\n                                            <div>\n                                                <label className=\"form-label\">Upload point data in .csv or polygon data in .geojson format</label>\n                                                <input\n                                                    className=\"form-control form-control-sm\"\n                                                    type=\"file\" accept=\".csv,.geojson\"\n                                                    onChange={handleFileChange}\n                                                    title='Only .csv or .geojson files are accepted'\n                                                    ref={fileInputRef}\n                                                />\n\n                                                <button\n                                                    className=\"btn btn-secondary mt-2\"\n                                                    onClick={handleCancelSelection}\n                                                    disabled={!uploadeddata || uploadeddata.length === 0}\n                                                >\n                                                    Cancel \n                                                </button>\n\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                </div>\n\n                            </div>\n\n\n                        </div>\n\n\n                    </div>\n\n                    <div className='decision_maps_container'>\n\n                        <div className='decision_maps'>\n                            <DecesionSupportMap\n                                selectedState={selectedState}\n                                selectedDistrict={selectedDistrict}\n                                selectedTehsil={selectedTehsil}\n                                filteredIndiaDistrict={filteredIndiaDistrict}\n                                selectedVariable={selectedVariable1}\n                                uploadeddata={uploadeddata}\n                                mapNumber=\"Map-1\"\n                            />\n                        </div>\n\n                        <div className='decision_maps'>\n                            <DecesionSupportMap\n                                selectedState={selectedState}\n                                selectedDistrict={selectedDistrict}\n                                selectedTehsil={selectedTehsil}\n                                filteredIndiaDistrict={filteredIndiaDistrict}\n                                selectedVariable={selectedVariable2}\n                                uploadeddata={uploadeddata}\n                                mapNumber=\"Map-2\"\n                            />\n                        </div>\n\n                        <div className='decision_maps'>\n                            <DecesionSupportMap\n                                selectedState={selectedState}\n                                selectedDistrict={selectedDistrict}\n                                selectedTehsil={selectedTehsil}\n                                filteredIndiaDistrict={filteredIndiaDistrict}\n                                selectedVariable={selectedVariable3}\n                                uploadeddata={uploadeddata}\n                                mapNumber=\"Map-3\"\n                            />\n                        </div>\n\n                        <div className='decision_maps'>\n                            <DecesionSupportMap\n                                selectedState={selectedState}\n                                selectedDistrict={selectedDistrict}\n                                selectedTehsil={selectedTehsil}\n                                selectedMapData={selectedMapData}\n                                filteredIndiaDistrict={filteredIndiaDistrict}\n                                selectedVariable={selectedVariable4}\n                                uploadeddata={uploadeddata}\n                                mapNumber=\"Map-4\"\n                            />\n                        </div>\n\n\n                    </div>\n\n                </div>\n            </div>\n\n        </>\n    )\n}\n\nexport default DecisionSupportPage\n"],"names":["_ref","selectedState","selectedDistrict","selectedTehsil","filteredIndiaDistrict","TalukaOnEachfeature","filteredDataStyle","map","useMap","useEffect","features","length","bounds","reduce","acc","feature","featureBounds","L","geometry","getBounds","extend","flyToBounds","flyTo","mapCenter","setInitialMapZoom","_jsx","_Fragment","children","GeoJSON","data","style","onEachFeature","selectedMapData","selectedVariable","uploadeddata","mapNumber","isGeoJSON","type","TalukaDensity","density","mapZoom","viewportWidth","window","innerWidth","_jsxs","MapContainer","center","width","height","backgroundColor","border","margin","zoom","maxBounds","minZoom","keyboard","dragging","setDragging","attributionControl","doubleClickZoom","className","name","bottom","right","fontSize","src","alt","FiltererdJsonData","ID","DataItem","MonsoonData","find","item","value","getDensityFromSummerData","properties","fillColor","weight","opacity","color","fillOpacity","layer","on","popupContent","toFixed","concat","STATE","DISTRICT","TEHSIL","bindTooltip","sticky","openTooltip","closeTooltip","interactive","IndiaStates","index","Marker","position","parseFloat","Latitude","Longitude","icon","iconUrl","marker_icon","iconRetinaUrl","iconSize","popupAnchor","Tooltip","ScaleControl","MapDatasetOptions","DataName","DataValue","variables","DecisionSupportPage","setSelectedMapData","useState","selectedVariable1","setSelectedVariable1","selectedVariable2","setSelectedVariable2","selectedVariable3","setSelectedVariable3","selectedVariable4","setSelectedVariable4","districtList","setDistrictList","talukaList","setTalukaList","setSelectedState","setSelectedDistrict","setSelectedTehsil","setFilteredIndiaDistrict","setUploadeddata","setAlertMessage","setShowAlert","useAlertContext","fileInputRef","useRef","overflowY","id","Autocomplete","marginBottom","onChange","event","options","getOptionLabel","option","isOptionEqualToValue","noOptionsText","renderInput","params","TextField","label","disabled","handleStateSelect","items","filter","Set","sort","filteredFeatures","IndiaSubdistricts","state","Name","handleDistrictSelect","district","handleTalukaSelect","taluka","accept","selectedFile","target","files","fileType","split","pop","Papa","header","complete","results","uploadedHeaders","Object","keys","missingHeaders","includes","join","error","message","reader","FileReader","onload","e","jsonData","JSON","parse","result","onerror","readAsText","title","ref","onClick","handleCancelSelection","current","DecesionSupportMap"],"sourceRoot":""}