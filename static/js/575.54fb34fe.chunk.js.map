{"version":3,"file":"static/js/575.54fb34fe.chunk.js","mappings":"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","sources":["components/SearchBar.js","helpers/mapFunction.js","components/Basemap.js","components/ShortFooter.js","pages/FiltererdJsonData.js","components/MapLegend.js","pages/ClimateRiskDashboard.js"],"sourcesContent":["import React, { useEffect } from 'react'\nimport { useMap } from 'react-leaflet';\nimport { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\nimport 'leaflet-geosearch/dist/geosearch.css';\nimport iconMarker from 'leaflet/dist/images/marker-icon.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport L from 'leaflet';\n\n// Merge custom icon options with default options\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: iconRetina,\n  iconUrl: iconMarker,\n  shadowUrl: iconShadow,\n});\n\nconst SearchBar = () => {\n  const map = useMap();\n\n  useEffect(() => {\n    const provider = new OpenStreetMapProvider();\n    const searchControl = new GeoSearchControl({\n      provider,\n      style: 'bar',\n    });\n\n    map.addControl(searchControl);\n\n    return () => {\n      map.removeControl(searchControl);\n    };\n  }, [map]);\n\n  return (\n    null\n  )\n}\n\nexport default SearchBar","import * as L from \"leaflet\";\n\nexport const BaseMapsLayers = [\n    {\n        name: \"Street Map\",\n        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',\n        subdomains: ['a', 'b', 'c'],\n        attribution: 'Tiles &copy; Esri'\n    },\n    {\n        name: \"Google Map\",\n        url: 'https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}',\n        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n        attribution: \"\"\n    },\n    // {\n    //   name: \"Open Street Map\",\n    //   url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    //   subdomains: ['a', 'b', 'c']\n    // },\n    {\n        name: \"Topographic Map\",\n        url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n        subdomains: ['a', 'b', 'c'],\n        attribution: \"\"\n    },\n    {\n        name: \"Satellite Map\",\n        url: 'https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',\n        subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],\n        attribution: \"\"\n    },\n\n    // {\n    //     name: \"Physical Map\",\n    //     url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer/tile/{z}/{y}/{x}',\n    //     subdomains: ['a', 'b', 'c'],\n    //     attribution: \"Tiles &copy; Esri &mdash; Source: US National Park Service\"\n    // },\n\n]\n\n\n\n\n\nexport const mapCenter = [23, 84]\n\nexport const setInitialMapZoom = ()=> {\n    var viewportWidth = window.innerWidth;\n    var mapZoom;\n    if (viewportWidth <= [767]) {\n        mapZoom = [4];\n    } if (viewportWidth >= [768]) {\n        mapZoom = [4.3];\n    } if (viewportWidth >= [1600]) {\n        mapZoom = [5];\n    }\n    return mapZoom;\n}\nexport const setDragging = () => {\n    var viewportWidth = window.innerWidth;\n    var dragging;\n    if (viewportWidth <= [767]) {\n        dragging = false;\n    } if (viewportWidth >= [768]) {\n        dragging = true;\n    }\n    return dragging;\n}\n\n\nexport const maxBounds = L.latLngBounds(\n    L.latLng(4, 60),  \n    L.latLng(45, 110)  \n);\n\n\n","import React, { useState } from 'react'\nimport { TileLayer, GeoJSON, LayersControl, FeatureGroup, ScaleControl, useMap, useMapEvents } from 'react-leaflet'\n// import L from 'leaflet';\nimport { FaHome } from \"react-icons/fa\";\nimport { BaseMapsLayers, mapCenter, setInitialMapZoom } from '../helpers/mapFunction';\n\n\n\n\n\n\nconst BaseMap = () => {\n\n\n    const [mousePosition, setMousePosition] = useState({ lat: 0, lng: 0 });\n\n    const map = useMap();\n\n\n\n\n\n\n    const HandleMouseHover = () => {\n        useMapEvents({\n            mousemove: (e) => {\n                setMousePosition(e.latlng);\n            },\n        });\n        return null;\n    };\n\n\n\n\n    const handleZoomToCenter = () => {\n        map.setView(mapCenter, setInitialMapZoom());\n\n    };\n\n\n\n\n    return (\n        <>\n\n\n            <HandleMouseHover />\n\n\n            <div\n                className='coordinates_container' >\n                Lat: {mousePosition.lat.toFixed(4)}, Long:{\" \"}\n                {mousePosition.lng.toFixed(4)}\n            </div>\n            <button className='map_home_btn' onClick={handleZoomToCenter}><FaHome /></button>\n            <ScaleControl />\n\n\n\n\n        </>\n    )\n}\n\nexport default BaseMap","import React from 'react'\nimport WCLLogo from \"../assets/images/logo.png\"\nimport { FaExternalLinkAlt } from \"react-icons/fa\";\n\nconst ShortFooter = () => {\n\n  return (\n    <div>\n      <div className=\"footer_section\">\n        \n        <div className=\"copyright_container\">\n          <div className=\"copyright_text\">\n            <p>&copy; 2024 CEEW. All rights reserved.</p>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ShortFooter","import React, { useEffect } from 'react';\nimport { GeoJSON, useMap } from 'react-leaflet';\nimport * as L from 'leaflet';\nimport { mapCenter, setInitialMapZoom } from '../helpers/mapFunction';\n\n\nconst FiltererdJsonData = ({\n    selectedState,\n    selectedDistrict,\n    selectedTehsil,\n    filteredIndiaDistrict,\n}) => {\n    const map = useMap();\n\n\n\n\n    useEffect(() => {\n        if (filteredIndiaDistrict && filteredIndiaDistrict.features.length > 0) {\n            const bounds = filteredIndiaDistrict.features.reduce((acc, feature) => {\n                const featureBounds = L.geoJSON(feature.geometry).getBounds();\n                return acc.extend(featureBounds);\n            }, new L.LatLngBounds());\n\n            map.flyToBounds(bounds);\n        } else {\n            map.flyTo(mapCenter, setInitialMapZoom());\n        }\n    }, [filteredIndiaDistrict, map]);\n\n\n    return (\n        <>\n            {filteredIndiaDistrict && filteredIndiaDistrict.features && (\n\n            <GeoJSON\n                key={selectedState+selectedDistrict+selectedTehsil}\n                data={filteredIndiaDistrict.features}\n                style={{ fillColor: 'none', weight: 2, color: 'yellow' }}\n            />\n            \n            )}\n        </>\n\n    );\n};\n\nexport default FiltererdJsonData;\n","import React from 'react'\nconst MapLegend = ({selectedMapData}) => {\n    return (\n        <>\n\n                <div className=\"legend\">\n                    <div className=\"item-heading\">\n                        <p>Legend: {selectedMapData}</p>\n                    </div>\n                    {/* <div className=\"legend-item\">\n                        <p className=\"legend-color-value\"> Exceptional</p>\n                        <p className=\"legend-color-value\"> Extreme</p>\n                        <p className=\"legend-color-value\"> Severe</p>\n                        <p className=\"legend-color-value\"> Moderate</p>\n                        <p className=\"legend-color-value\"> Abnormal</p>\n                        <p className=\"legend-color-value\"> Normal</p>\n                    </div> */}\n                    <div className=\"legend-color\">\n                        <i style={{backgroundColor: '#F7FBFF'}}></i>\n                        <i style={{backgroundColor: '#E4EFF9'}}></i>\n                        <i style={{backgroundColor: '#D1E2F3'}}></i>\n                        <i style={{backgroundColor: '#BAD6EB'}}></i>\n                        <i style={{backgroundColor: '#73B2D8'}}></i>\n                        <i style={{backgroundColor: '#539DCC'}}></i>\n                        <i style={{backgroundColor: '#3585BF'}}></i>\n                        <i style={{backgroundColor: '#1E6CB1'}}></i>\n                        <i style={{backgroundColor: '#08519C'}}></i>\n                        <i style={{backgroundColor: '#09306B'}}></i>\n                    </div>\n\n                    <div className=\"legend-item\">\n                        <p className=\"legend-num-value\"> 0</p>\n                        <p className=\"legend-num-value\"> 0.1</p>\n                        <p className=\"legend-num-value\"> 0.25</p>\n                        <p className=\"legend-num-value\"> 0.5</p>\n                        <p className=\"legend-num-value\"> 1</p>\n                        <p className=\"legend-num-value\"> 2</p>\n                        <p className=\"legend-num-value\"> 5</p>\n                        <p className=\"legend-num-value\"> 10</p>\n                        <p className=\"legend-num-value\"> 15</p>\n                        <p className=\"legend-num-value\"> 30</p>\n                    </div>\n\n                </div>\n\n        </>\n\n    )\n}\n\nexport default MapLegend","import React, { useState } from 'react'\nimport SearchBar from \"../components/SearchBar\";\nimport { MapContainer, GeoJSON, TileLayer, ImageOverlay } from \"react-leaflet\";\nimport * as L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\nimport { BaseMapsLayers, mapCenter, maxBounds, setDragging, setInitialMapZoom } from '../helpers/mapFunction'\nimport BaseMap from '../components/Basemap'\nimport IndiaBoundary from '../assets/data/shapefiles/IndiaBoundary.json';\nimport IndiaDistricts from '../assets/data/shapefiles/IndiaDistricts.json';\nimport IndiaStates from '../assets/data/shapefiles/IndiaStates.json';\nimport IndiaSubdistricts from '../assets/data/shapefiles/IndiaSubdistricts.json';\nimport ShortFooter from '../components/ShortFooter';\nimport MonsoonData from \"../assets/data/MonsoonData.json\"\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport FiltererdJsonData from './FiltererdJsonData';\nimport MapLegend from '../components/MapLegend';\n\n// const LayersOptions = [\n//     { name: 'Irrigated/Rainfed', value: 'Irrigated_Rainfed' },\n//     { name: 'Elevation', value: 'elevation' },\n// ];\n\nconst VectorDataOptions = [\n    { name: 'Country Boundry', value: 'Country_Boundry', data: IndiaBoundary },\n    { name: 'States Boundry', value: 'Basin_Boundry', data: IndiaStates },\n    { name: 'District Boundry', value: 'District_Boundry', data: IndiaDistricts },\n    // { name: 'Sub-district Boundry', value: 'SubDistrict_Boundry', data: IndiaSubdistricts },\n\n];\n\nconst MonsoonDataOptions = ['august_anomaly_mean', 'august_panomaly_mean', 'september_panomaly_mean', 'september_anomaly_mean', 'ond_panomaly_mean', 'ond_heavy_anomaly_mean', 'ond_anomaly_mean', 'october_panomaly_mean', 'october_anomaly_mean', 'november_panomaly_mean', 'november_anomaly_mean', 'june_panomaly_mean', 'june_anomaly_mean', 'july_panomaly_mean', 'july_anomaly_mean', 'jjas_vhrd_anomaly_mean', 'jjas_vhintensity_anomaly_mean', 'jjas_vheavy_anomaly_mean', 'jjas_percent_anomaly_mean', 'jjas_panomaly_mean', 'jjas_normal_years_mean', 'jjas_moderate_anomaly_mean', 'jjas_hrd_anomaly_mean', 'jjas_hintensity_anomaly_mean', 'jjas_heavy_anomaly_mean', 'jjas_excessive_years_mean', 'jjas_dryspell_anomaly_mean', 'jjas_dry_anomaly_mean', 'jjas_deficient_years_mean', 'jjas_decade_normal_years_mean', 'jjas_decade_excessive_years_mean', 'jjas_decade_deficient_years_mean', 'jjas_cv_mean', 'jjas_anomaly_mean', 'december_panomaly_mean', 'december_anomaly_mean']\n\n\n\n\nconst ClimateRiskDashboard = () => {\n    const [selectedRasterLayer, setSelectedRasterLayer] = useState(\"Irrigated_Rainfed\");\n    const [rasterLayerOpacity, setRasterLayerOpacity] = useState(1);\n    const [selectedVectorData, setSelectedVectorData] = useState(VectorDataOptions[0]);\n    const [selectedBasemapLayer, setSelectedBasemapLayer] = useState(BaseMapsLayers[0]);\n\n    const [selectedMapData, setSelectedMapData] = useState(null);\n\n    const [districtList, setDistrictList] = useState([]);\n    const [talukaList, setTalukaList] = useState([]);\n    const [selectedState, setSelectedState] = useState(null);\n    const [selectedDistrict, setSelectedDistrict] = useState(null);\n    const [selectedTehsil, setSelectedTehsil] = useState(null);\n    const [selectedGeoJSonData, setSelectedGeoJSonData] = useState(null);\n    const [filteredIndiaDistrict, setFilteredIndiaDistrict] = useState(null);\n\n    const handleDataSelectionChange = (event, value) => {\n        setSelectedMapData(value);\n    };\n\n\n    const handleBasemapSelection = (e) => {\n        const selectedItem = BaseMapsLayers.find((item) => item.name === e.target.value);\n        setSelectedBasemapLayer(selectedItem);\n\n\n    };\n\n\n    const handleStateSelect = (event, value) => {\n        let items = MonsoonData.filter((item) => item.STATE === value);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n\n        setDistrictList(items);\n        setSelectedState(value)\n\n        let filteredFeatures = IndiaSubdistricts.features.filter((feature) => feature.properties.STATE === value);\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredFeatures,\n        });\n\n    };\n\n    const handleDistrictSelect = (event, value) => {\n\n        let items = MonsoonData.filter((item) => item.DISTRICT === value && item.STATE === selectedState);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n\n        setTalukaList(items);\n        setSelectedDistrict(value)\n\n        let filteredFeatures = IndiaSubdistricts.features.filter((feature) => feature.properties.DISTRICT === value && feature.properties.STATE === selectedState);\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredFeatures,\n        });\n\n    };\n\n    const handleTalukaSelect = (event, value) => {\n\n        let items = MonsoonData.filter((item) => item.TEHSIL === value && item.DISTRICT === selectedDistrict);\n        items = [...new Set(items.map((item) => item))];\n        items.sort();\n\n\n        setSelectedTehsil(value)\n\n        let filteredFeatures = IndiaSubdistricts.features.filter((feature) => feature.properties.TEHSIL === value && feature.properties.DISTRICT === selectedDistrict);\n\n        setFilteredIndiaDistrict({\n            type: \"FeatureCollection\",\n            features: filteredFeatures,\n        });\n\n\n        // setFilteredIndiaDistrict({\n        //     type: \"FeatureCollection\",\n        //     features: filteredDistrictFeatures,\n        // });\n        // if (selectedView === 'District Wise') {\n        //     setSelectedFeatureID(filteredDistrictFeatures[0].properties.ID)\n        // }\n\n    };\n\n\n\n\n    const handleRasterLayerSelection = (e) => {\n        const value = e.target.value;\n        setSelectedRasterLayer((prevSelectedRaster) =>\n            prevSelectedRaster === value ? '' : value\n        );\n    };\n\n    const handleOpacityChange = (e) => {\n        setRasterLayerOpacity(parseFloat(e.target.value));\n    };\n\n\n    const handleVectorLayerSelection = (e) => {\n        const selectedItem = VectorDataOptions.find((item) => item.value === e.target.value);\n        setSelectedVectorData(selectedItem);\n    };\n\n\n\n\n    function TalukaOnEachfeature(feature, layer) {\n        layer.on('mouseover', function () {\n            const DataItem = MonsoonData.find(item => item.ID === feature.properties.ID);\n\n            if (feature.properties && feature.properties.ID) {\n                let popupContent;\n                const value = DataItem[selectedMapData] ? DataItem[selectedMapData].toFixed(2) : \"NA\"\n\n                popupContent = `\n                <div>\n                ID: ${feature.properties.ID}<br/>\n                STATE: ${feature.properties.STATE}<br/>\n                DISTRICT: ${feature.properties.DISTRICT}<br/>\n                TEHSIL: ${feature.properties.TEHSIL}<br/>\n                VALUE: ${value}\n                    \n                   \n                    \n                </div>\n        `;\n\n                layer.bindTooltip(popupContent, { sticky: true });\n            }\n            layer.openTooltip();\n        });\n\n        layer.on('mouseout', function () {\n            layer.closeTooltip();\n        });\n    }\n\n\n\n    const TalukaDensity = (density => {\n        return density > 30 ? '#09306B'\n            : density > 15 ? '#08519C'\n                : density > 10 ? '#1E6CB1'\n                    : density > 5 ? '#3585BF'\n                        : density > 2 ? '#539DCC'\n                            : density > 1 ? '#73B2D8'\n                                : density > 0.5 ? '#BAD6EB'\n                                    : density > 0.25 ? '#D1E2F3'\n                                        : density > 0.1 ? '#E4EFF9'\n                                            : '#F7FBFF';\n    })\n\n\n\n\n    const TalukaStyle = (feature => {\n\n        const getDensityFromSummerData = (ID) => {\n            const DataItem = MonsoonData.find(item => item.ID === ID);\n            return DataItem ? DataItem[selectedMapData] : null;\n        };\n\n        const density = getDensityFromSummerData(feature.properties.ID);\n\n        return ({\n            fillColor: TalukaDensity(density),\n            weight: 0.5,\n            opacity: 1,\n            color: 'black',\n            // dashArray: '2',\n            fillOpacity: 1\n        });\n    });\n\n\n    return (\n        <>\n            <div className='dasboard_page_container'>\n\n\n                <div className='main_dashboard'>\n                    <div className='left_panel'>\n\n                        <div className=\"card_container\" style={{ height: \"100%\", overflowY: \"auto\" }}>\n\n                            <div className=\"accordion\" >\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\n                                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseThree\">\n                                            Base Map\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingThree\">\n                                        <div className=\"accordion-body\">\n                                            {BaseMapsLayers.map((option, index) => (\n                                                <div key={index} className=\"map_layers\">\n                                                    <input\n                                                        type=\"radio\"\n                                                        id={option.name}\n\n                                                        value={option.name}\n                                                        checked={selectedBasemapLayer.name === option.name}\n                                                        onChange={handleBasemapSelection}\n                                                    />\n                                                    <label htmlFor={option.name}>{option.name}</label>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\n                                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\n                                            Choose Data\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\n\n                                        <div className=\"accordion-body\">\n                                            <div className='map_layers'>\n\n                                                <Autocomplete\n                                                    style={{ marginBottom: \"20px\" }}\n                                                    onChange={(event, value) => handleDataSelectionChange(event, value)}\n                                                    id=\"selectedMapData\"\n                                                    value={selectedMapData}\n                                                    getOptionLabel={(selectedMapData) => `${selectedMapData}`}\n                                                    options={[...new Set(MonsoonDataOptions.map(item => item))].sort()}\n                                                    isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                                    noOptionsText={\"No Available Data\"}\n                                                   \n                                                    renderOption={(props, state) => (\n                                                        <Box component=\"li\" {...props} key={state}\n                                                            sx={{\n                                                                fontSize: \"14px\",\n                                                            }}>\n                                                            {state}\n                                                        </Box>\n                                                    )}\n                                                    renderInput={(params) => <TextField {...params} label=\"Select Monsoon Data\" />}\n                                                />\n\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-heading4\">\n                                        <button className=\"accordion-button \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapse4\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapse4\">\n                                            Filter Data\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapse4\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-heading4\">\n                                        <div className=\"accordion-body\">\n\n                                            <Autocomplete\n                                                style={{ marginBottom: \"20px\" }}\n                                                onChange={(event, value) => handleStateSelect(event, value)}\n                                                id=\"state\"\n                                                value={selectedState}\n                                                getOptionLabel={(state) => `${state}`}\n                                                options={[...new Set(MonsoonData.map(item => item.STATE))].sort()}\n                                                isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                                noOptionsText={\"No Available Data\"}\n                                                disabled={!selectedMapData}\n                                                renderOption={(props, state) => (\n                                                    <Box component=\"li\" {...props} key={state}\n                                                        sx={{\n                                                            fontSize: \"14px\",\n                                                        }}>\n                                                        {state}\n                                                    </Box>\n                                                )}\n                                                renderInput={(params) => <TextField {...params} label=\"Search State\" />}\n                                            />\n\n                                            <Autocomplete\n                                                value={selectedDistrict}\n                                                style={{ marginBottom: \"20px\" }}\n                                                onChange={(event, value) => handleDistrictSelect(event, value)}\n                                                id=\"district\"\n                                                getOptionLabel={(district) => `${district}`}\n                                                options={[...new Set(districtList.map((item) => item.DISTRICT))]}\n                                                isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                                noOptionsText={\"No Available Data\"}\n                                                disabled={districtList.length === 0}\n                                                renderOption={(props, district) => (\n                                                    <Box component=\"li\" {...props} key={district}\n                                                        sx={{\n                                                            fontSize: \"14px\",\n                                                        }}>\n                                                        {district}\n                                                    </Box>\n                                                )}\n                                                renderInput={(params) => <TextField {...params}\n\n                                                    label=\"Search District\" />}\n                                            />\n\n                                            <Autocomplete\n                                                value={selectedTehsil}\n                                                style={{ marginBottom: \"20px\" }}\n                                                onChange={(event, value) => handleTalukaSelect(event, value)}\n                                                id=\"taluka\"\n                                                getOptionLabel={(taluka) => `${taluka}`}\n                                                options={[...new Set(talukaList.map((item) => item.TEHSIL))]}\n                                                isOptionEqualToValue={(option, value) => option.Name === value.Name}\n                                                noOptionsText={\"No Available Data\"}\n                                                disabled={talukaList.length === 0}\n                                                renderOption={(props, taluka) => (\n                                                    <Box component=\"li\" {...props} key={taluka}\n                                                        sx={{\n                                                            fontSize: \"14px\",\n                                                        }}>\n                                                        {taluka}\n                                                    </Box>\n                                                )}\n                                                renderInput={(params) => <TextField {...params}\n\n                                                    label=\"Search Tehsil\" />}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className=\"accordion-item\">\n                                    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\n                                        <button className=\"accordion-button \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"frue\" aria-controls=\"panelsStayOpen-collapseTwo\">\n                                            Choose Boundaries\n                                        </button>\n                                    </h2>\n                                    <div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingTwo\">\n                                        <div className=\"accordion-body\">\n                                            {VectorDataOptions.map(option => (\n                                                <div key={option.value} className=\"map_layers\">\n                                                    <input\n                                                        type=\"checkbox\"\n                                                        id={option.value}\n                                                        name=\"data_type\"\n                                                        value={option.value}\n                                                        checked={selectedVectorData?.value === option.value}\n                                                        onChange={handleVectorLayerSelection}\n                                                    />\n                                                    <label htmlFor={option.value}>{option.name}</label>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n\n                            </div>\n\n\n                        </div>\n\n\n                    </div>\n\n                    <div className='right_panel'>\n\n                        <MapContainer\n                            fullscreenControl={true}\n                            center={mapCenter}\n                            style={{ width: '100%', height: \"100%\", backgroundColor: 'white', border: 'none', margin: 'auto' }}\n                            zoom={setInitialMapZoom()}\n                            maxBounds={maxBounds}\n                            // maxZoom={8}\n                            minZoom={setInitialMapZoom()}\n                            keyboard={false}\n                            dragging={setDragging()}\n                            // attributionControl={false}\n                            // scrollWheelZoom={false}\n                            doubleClickZoom={false}\n                        >\n\n                            <BaseMap />\n                            <SearchBar />\n                            <TileLayer\n                                key={selectedBasemapLayer.url}\n                                attribution={selectedBasemapLayer.attribution}\n                                url={selectedBasemapLayer.url}\n                                subdomains={selectedBasemapLayer.subdomains}\n                            />\n\n                            \n\n\n                            {selectedMapData && (\n                                <>\n                                <div className=\"legend_panel_container\">\n                                <MapLegend selectedMapData={selectedMapData} />\n                            </div>\n                                    <GeoJSON\n                                        style={TalukaStyle}\n                                        onEachFeature={TalukaOnEachfeature}\n                                        data={IndiaSubdistricts}\n                                    />\n                            </>\n                            )}\n\n\n                            {filteredIndiaDistrict && (\n                                <FiltererdJsonData\n                                    selectedState={selectedState}\n                                    selectedDistrict={selectedDistrict}\n                                    selectedTehsil={selectedTehsil}\n                                    filteredIndiaDistrict={filteredIndiaDistrict}\n                                />\n\n\n                            )}\n\n                            <GeoJSON\n                                key={selectedVectorData.value}\n                                style={{\n                                    fillColor: \"black\",\n                                    weight: 2,\n                                    color: \"black\",\n                                    fillOpacity: \"0.001\",\n                                    interactive: false,\n                                }}\n                                data={selectedVectorData.data.features}\n                            />\n\n\n\n\n\n                        </MapContainer>\n                    </div>\n\n\n                </div>\n            </div>\n            {/* <ShortFooter /> */}\n        </>\n    )\n}\n\nexport default ClimateRiskDashboard\n"],"names":["L","Default","mergeOptions","iconRetinaUrl","iconRetina","iconUrl","iconMarker","shadowUrl","iconShadow","SearchBar","map","useMap","useEffect","provider","OpenStreetMapProvider","searchControl","GeoSearchControl","style","addControl","removeControl","BaseMapsLayers","name","url","subdomains","attribution","mapCenter","setInitialMapZoom","mapZoom","viewportWidth","window","innerWidth","setDragging","dragging","maxBounds","BaseMap","mousePosition","setMousePosition","useState","lat","lng","HandleMouseHover","useMapEvents","mousemove","e","latlng","_jsxs","_Fragment","children","_jsx","className","toFixed","onClick","handleZoomToCenter","setView","FaHome","ScaleControl","_ref","selectedState","selectedDistrict","selectedTehsil","filteredIndiaDistrict","features","length","bounds","reduce","acc","feature","featureBounds","geometry","getBounds","extend","flyToBounds","flyTo","GeoJSON","data","fillColor","weight","color","selectedMapData","backgroundColor","VectorDataOptions","value","IndiaBoundary","IndiaStates","IndiaDistricts","MonsoonDataOptions","ClimateRiskDashboard","selectedRasterLayer","setSelectedRasterLayer","rasterLayerOpacity","setRasterLayerOpacity","selectedVectorData","setSelectedVectorData","selectedBasemapLayer","setSelectedBasemapLayer","setSelectedMapData","districtList","setDistrictList","talukaList","setTalukaList","setSelectedState","setSelectedDistrict","setSelectedTehsil","selectedGeoJSonData","setSelectedGeoJSonData","setFilteredIndiaDistrict","handleBasemapSelection","selectedItem","find","item","target","handleVectorLayerSelection","TalukaDensity","density","height","overflowY","id","type","option","index","checked","onChange","htmlFor","Autocomplete","marginBottom","event","handleDataSelectionChange","getOptionLabel","concat","options","Set","sort","isOptionEqualToValue","Name","noOptionsText","renderOption","props","state","_createElement","Box","component","key","sx","fontSize","renderInput","params","TextField","label","handleStateSelect","items","MonsoonData","filter","STATE","filteredFeatures","IndiaSubdistricts","properties","disabled","handleDistrictSelect","DISTRICT","district","handleTalukaSelect","TEHSIL","taluka","MapContainer","fullscreenControl","center","width","border","margin","zoom","minZoom","keyboard","doubleClickZoom","TileLayer","MapLegend","ID","DataItem","getDensityFromSummerData","opacity","fillOpacity","onEachFeature","layer","on","popupContent","bindTooltip","sticky","openTooltip","closeTooltip","FiltererdJsonData","interactive"],"sourceRoot":""}